// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FunctionGatewayMetaData contains all meta data concerning the FunctionGateway contract.
var FunctionGatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"CallbackFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeploy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"name\":\"FunctionAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"inputHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"expectedRequestHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualOwner\",\"type\":\"address\"}],\"name\":\"NotFunctionOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"inputHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"outputHash\",\"type\":\"bytes32\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployedAddress\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FunctionOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FunctionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"FunctionVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"entryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"entryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"entryGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"RequestCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"RequestCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"inputHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"outputHash\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"deployAndRegisterFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"deployAndUpdateFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callbackData\",\"type\":\"bytes\"}],\"name\":\"fulfillCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_inputHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_context\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getFunctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_entryAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_entryCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_entryGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_context\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestCallback\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"verifiedCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedFunctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedInputHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedOutput\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifierOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600254610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60025460ff90811614620000e5576002805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612c4e6200011f600039600081816109520152818161099201528181610bfa01528181610c3a0152610cc90152612c4e6000f3fe6080604052600436106101ee5760003560e01c806368ff41b11161010d578063affed0e0116100a0578063bd58c4bb1161006f578063bd58c4bb146105da578063d547741f146105fa578063efe1c9501461061a578063f288a2e214610650578063ffa1ad741461068457600080fd5b8063affed0e01461054e578063b3f04fdf14610587578063b63755e51461059a578063bac2a106146105ba57600080fd5b80638bcfc3a0116100dc5780638bcfc3a0146104c357806391d14854146104f95780639538f56f14610519578063a217fddf1461053957600080fd5b806368ff41b11461045657806378370ebd1461047657806380e0bbb0146104965780638157ce2b146104ad57600080fd5b806336568abe11610185578063485cc95511610154578063485cc955146103d15780634f1ef286146103f157806352d1902d146104045780635c74ad561461041957600080fd5b806336568abe146103465780633659cfe614610366578063436a61d514610386578063478222c21461039957600080fd5b8063176e62fd116101c1578063176e62fd146102a0578063248a9ca3146102c057806324ea54f4146102f05780632f2ff15d1461032457600080fd5b806301ffc9a7146101f357806305d7c1cf146102285780630ab469b014610243578063173869f01461027e575b600080fd5b3480156101ff57600080fd5b5061021361020e3660046120ec565b6106b2565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610102546102139060ff1681565b34801561024f57600080fd5b5061027061025e36600461211b565b60fe6020526000908152604090205481565b60405190815260200161021f565b34801561028a57600080fd5b506102936106e9565b60405161021f9190612186565b3480156102ac57600080fd5b506102936102bb36600461223c565b610778565b3480156102cc57600080fd5b506102706102db366004612283565b600090815260cb602052604090206001015490565b3480156102fc57600080fd5b506102707f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561033057600080fd5b5061034461033f3660046122b3565b6108a0565b005b34801561035257600080fd5b506103446103613660046122b3565b6108ca565b34801561037257600080fd5b506103446103813660046122df565b610948565b6103446103943660046122fa565b610a27565b3480156103a557600080fd5b5060fd546103b9906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b3480156103dd57600080fd5b506103446103ec366004612389565b610ad1565b6103446103ff3660046123b3565b610bf0565b34801561041057600080fd5b50610270610cbc565b34801561042557600080fd5b506104396104343660046123eb565b610d6f565b604080519283526001600160a01b0390911660208301520161021f565b34801561046257600080fd5b506102706104713660046123b3565b610e4f565b34801561048257600080fd5b50610344610491366004612445565b610f3d565b3480156104a257600080fd5b506102706101005481565b3480156104b957600080fd5b5061027060ff5481565b3480156104cf57600080fd5b506103b96104de366004612283565b6001602052600090815260409020546001600160a01b031681565b34801561050557600080fd5b506102136105143660046122b3565b611167565b34801561052557600080fd5b506102706105343660046123b3565b611192565b34801561054557600080fd5b50610270600081565b34801561055a57600080fd5b5060fd5461057290600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161021f565b610270610595366004612524565b6111c5565b3480156105a657600080fd5b506104396105b53660046123eb565b611362565b3480156105c657600080fd5b506103446105d53660046125a7565b611433565b3480156105e657600080fd5b506102706105f53660046123b3565b6115e4565b34801561060657600080fd5b506103446106153660046122b3565b6116ce565b34801561062657600080fd5b506103b9610635366004612283565b6000602081905290815260409020546001600160a01b031681565b34801561065c57600080fd5b506102707ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b34801561069057600080fd5b506040805180820190915260058152640312e302e360dc1b6020820152610293565b60006001600160e01b03198216637965db0b60e01b14806106e357506301ffc9a760e01b6001600160e01b03198316145b92915050565b61010180546106f79061266d565b80601f01602080910402602001604051908101604052809291908181526020018280546107239061266d565b80156107705780601f1061074557610100808354040283529160200191610770565b820191906000526020600020905b81548152906001019060200180831161075357829003601f168201915b505050505081565b6060600060028360405161078c91906126a7565b602060405180830381855afa1580156107a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107cc91906126c3565b90508360ff541480156107e157508061010054145b1561087a5761010180546107f49061266d565b80601f01602080910402602001604051908101604052809291908181526020018280546108209061266d565b801561086d5780601f106108425761010080835404028352916020019161086d565b820191906000526020600020905b81548152906001019060200180831161085057829003601f168201915b50505050509150506106e3565b838360405163aa74a2cb60e01b81526004016108979291906126dc565b60405180910390fd5b600082815260cb60205260409020600101546108bb816116f3565b6108c583836116fd565b505050565b6001600160a01b038116331461093a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610897565b6109448282611783565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109905760405162461bcd60e51b8152600401610897906126f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d9600080516020612bd2833981519152546001600160a01b031690565b6001600160a01b0316146109ff5760405162461bcd60e51b815260040161089790612741565b610a08816117ea565b60408051600080825260208201909252610a2491839190611833565b50565b847f88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3858585853334604051610a619695949392919061278d565b60405180910390a260fd546040516333bb7f9160e01b81526001600160a01b038581166004830152909116906333bb7f919034906024016000604051808303818588803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b50505050505050505050565b600254610100900460ff1615808015610af15750600254600160ff909116105b80610b0b5750303b158015610b0b575060025460ff166001145b610b6e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610897565b6002805460ff191660011790558015610b91576002805461ff0019166101001790555b610102805460ff19169055610ba6838361199e565b80156108c5576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c385760405162461bcd60e51b8152600401610897906126f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c81600080516020612bd2833981519152546001600160a01b031690565b6001600160a01b031614610ca75760405162461bcd60e51b815260040161089790612741565b610cb0826117ea565b61094482826001611833565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d5c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610897565b50600080516020612bd283398151915290565b600080610d7c3384611192565b6000818152602081905260409020549092506001600160a01b031615610db857604051635e34c78f60e01b815260048101839052602401610897565b600082815260016020526040902080546001600160a01b03191633179055610de08483611a34565b6000838152602081905260409081902080546001600160a01b0319166001600160a01b0384161790555190915082907f52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea90610e40908490879033906127e6565b60405180910390a29250929050565b6000610e5b3383611192565b6000818152602081905260409020549091506001600160a01b031615610e9757604051635e34c78f60e01b815260048101829052602401610897565b6001600160a01b038316610ebe576040516302d48d1f60e61b815260040160405180910390fd5b60008181526020818152604080832080546001600160a01b03199081166001600160a01b03891617909155600190925291829020805433921682179055905182917f52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea91610f2f9187918791906127e6565b60405180910390a292915050565b825160208401206000610f558b8b8b858c8c8c611ace565b63ffffffff8c16600090815260fe60205260409020549091508114610fb45763ffffffff8b16600081815260fe6020526040908190205490516310fc041760e31b81526004810192909252602482015260448101829052606401610897565b63ffffffff8b16600090815260fe602052604080822082905551600290610fdc9087906126a7565b602060405180830381855afa158015610ff9573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061101c91906126c3565b905061102a8b8b8387611b4e565b610102805460ff191660011790556040516000906001600160a01b038b16908a9061105b9089908b9060240161281b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161109991906126a7565b6000604051808303816000865af19150503d80600081146110d6576040519150601f19603f3d011682016040523d82523d6000602084013e6110db565b606091505b5050610102805460ff1916905590508061110e578886886040516315c9414b60e11b815260040161089793929190612849565b8b8d63ffffffff167f361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff28d85604051611150929190918252602082015260400190565b60405180910390a350505050505050505050505050565b600091825260cb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600082826040516020016111a792919061287d565b60405160208183030381529060405280519060200120905092915050565b6000806002866040516111d891906126a7565b602060405180830381855afa1580156111f5573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061121891906126c3565b8551602087012060fd5491925090339060009061124790600160a01b900463ffffffff168b8686868c8c611ace565b60fd8054919250600160a01b90910463ffffffff16906014611268836128b7565b82546101009290920a63ffffffff81810219909316918316021790915560fd8054600160a01b908190048316600090815260fe602052604090819020869055915491518e94509104909116907f22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93906112eb908d908d9088908e908e9034906128da565b60405180910390a360fd546040516333bb7f9160e01b81526001600160a01b038481166004830152909116906333bb7f919034906024016000604051808303818588803b15801561133b57600080fd5b505af115801561134f573d6000803e3d6000fd5b50939d9c50505050505050505050505050565b60008061136f3384611192565b6000818152600160205260409020549092506001600160a01b031633146113cb5760008281526001602052604090819020549051633368f56b60e11b81523360048201526001600160a01b039091166024820152604401610897565b6113d58483611a34565b6000838152602081815260409182902080546001600160a01b0319166001600160a01b038516908117909155915191825291925083917ffc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b7369101610e40565b600060028660405161144591906126a7565b602060405180830381855afa158015611462573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061148591906126c3565b9050600060028660405161149991906126a7565b602060405180830381855afa1580156114b6573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114d991906126c3565b90506114e788838388611b4e565b60ff8890556101008290556101016114ff878261298c565b506000846001600160a01b03168460405161151a91906126a7565b6000604051808303816000865af19150503d8060008114611557576040519150601f19603f3d011682016040523d82523d6000602084013e61155c565b606091505b5050905080611582578484604051636c544f3360e01b815260040161089792919061287d565b60ff6000905561010060009055610101600061159e9190612081565b60408051848152602081018490528a917f41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15910160405180910390a2505050505050505050565b60006115f03383611192565b6000818152600160205260409020549091506001600160a01b0316331461164c5760008181526001602052604090819020549051633368f56b60e11b81523360048201526001600160a01b039091166024820152604401610897565b6001600160a01b038316611673576040516302d48d1f60e61b815260040160405180910390fd5b6000818152602081815260409182902080546001600160a01b0319166001600160a01b038716908117909155915191825282917ffc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b7369101610f2f565b600082815260cb60205260409020600101546116e9816116f3565b6108c58383611783565b610a248133611c00565b6117078282611167565b61094457600082815260cb602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561173f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61178d8282611167565b1561094457600082815260cb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6118147ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0533611167565b610a2457604051636744392960e11b8152336004820152602401610897565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611866576108c583611c59565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118c0575060408051601f3d908101601f191682019092526118bd918101906126c3565b60015b6119235760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610897565b600080516020612bd283398151915281146119925760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610897565b506108c5838383611cf5565b600254610100900460ff166119c55760405162461bcd60e51b815260040161089790612a4c565b6119cd611d20565b6119d5611d20565b6119e06000836116fd565b611a0a7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f05836116fd565b6109447f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041826116fd565b60008251600003611a58576040516321744a5960e01b815260040160405180910390fd5b818351602085016000f590506001600160a01b038116611a8b57604051632081741d60e11b815260040160405180910390fd5b825160208401206040516001600160a01b0383169184917f27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f53290600090a492915050565b6040516001600160e01b031960e089811b821660208401526024830189905260448301889052606483018790526bffffffffffffffffffffffff19606087901b166084840152818516609884015283901b16609c82015260009060a001604051602081830303815290604052805190602001209050979650505050505050565b600084815260208190526040908190205490516303784b1960e61b81526001600160a01b0390911690819063de12c64090611b9190879087908790600401612a97565b6020604051808303816000875af1158015611bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd49190612ab6565b611bf957808484846040516316c7141360e31b81526004016108979493929190612ad8565b5050505050565b611c0a8282611167565b61094457611c1781611d49565b611c22836020611d5b565b604051602001611c33929190612b05565b60408051601f198184030181529082905262461bcd60e51b825261089791600401612186565b6001600160a01b0381163b611cc65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610897565b600080516020612bd283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611cfe83611efe565b600082511180611d0b5750805b156108c557611d1a8383611f3e565b50505050565b600254610100900460ff16611d475760405162461bcd60e51b815260040161089790612a4c565b565b60606106e36001600160a01b03831660145b60606000611d6a836002612b7a565b611d75906002612b91565b67ffffffffffffffff811115611d8d57611d8d612199565b6040519080825280601f01601f191660200182016040528015611db7576020820181803683370190505b509050600360fc1b81600081518110611dd257611dd2612ba4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e0157611e01612ba4565b60200101906001600160f81b031916908160001a9053506000611e25846002612b7a565b611e30906001612b91565b90505b6001811115611ea8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e6457611e64612ba4565b1a60f81b828281518110611e7a57611e7a612ba4565b60200101906001600160f81b031916908160001a90535060049490941c93611ea181612bba565b9050611e33565b508315611ef75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610897565b9392505050565b611f0781611c59565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611ef78383604051806060016040528060278152602001612bf2602791396060600080856001600160a01b031685604051611f7b91906126a7565b600060405180830381855af49150503d8060008114611fb6576040519150601f19603f3d011682016040523d82523d6000602084013e611fbb565b606091505b5091509150611fcc86838387611fd6565b9695505050505050565b6060831561204557825160000361203e576001600160a01b0385163b61203e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610897565b508161204f565b61204f8383612057565b949350505050565b8151156120675781518083602001fd5b8060405162461bcd60e51b81526004016108979190612186565b50805461208d9061266d565b6000825580601f1061209d575050565b601f016020900490600052602060002090810190610a2491905b808211156120cb57600081556001016120b7565b5090565b80356001600160e01b0319811681146120e757600080fd5b919050565b6000602082840312156120fe57600080fd5b611ef7826120cf565b803563ffffffff811681146120e757600080fd5b60006020828403121561212d57600080fd5b611ef782612107565b60005b83811015612151578181015183820152602001612139565b50506000910152565b60008151808452612172816020860160208601612136565b601f01601f19169290920160200192915050565b602081526000611ef7602083018461215a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126121c057600080fd5b813567ffffffffffffffff808211156121db576121db612199565b604051601f8301601f19908116603f0116810190828211818310171561220357612203612199565b8160405283815286602085880101111561221c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561224f57600080fd5b82359150602083013567ffffffffffffffff81111561226d57600080fd5b612279858286016121af565b9150509250929050565b60006020828403121561229557600080fd5b5035919050565b80356001600160a01b03811681146120e757600080fd5b600080604083850312156122c657600080fd5b823591506122d66020840161229c565b90509250929050565b6000602082840312156122f157600080fd5b611ef78261229c565b600080600080600060a0868803121561231257600080fd5b85359450602086013567ffffffffffffffff8082111561233157600080fd5b61233d89838a016121af565b955061234b6040890161229c565b9450606088013591508082111561236157600080fd5b5061236e888289016121af565b92505061237d60808701612107565b90509295509295909350565b6000806040838503121561239c57600080fd5b6123a58361229c565b91506122d66020840161229c565b600080604083850312156123c657600080fd5b6123cf8361229c565b9150602083013567ffffffffffffffff81111561226d57600080fd5b600080604083850312156123fe57600080fd5b823567ffffffffffffffff8082111561241657600080fd5b612422868387016121af565b9350602085013591508082111561243857600080fd5b50612279858286016121af565b60008060008060008060008060006101208a8c03121561246457600080fd5b61246d8a612107565b985060208a0135975060408a0135965061248960608b0161229c565b955061249760808b016120cf565b94506124a560a08b01612107565b935060c08a013567ffffffffffffffff808211156124c257600080fd5b6124ce8d838e016121af565b945060e08c01359150808211156124e457600080fd5b6124f08d838e016121af565b93506101008c013591508082111561250757600080fd5b506125148c828d016121af565b9150509295985092959850929598565b600080600080600060a0868803121561253c57600080fd5b85359450602086013567ffffffffffffffff8082111561255b57600080fd5b61256789838a016121af565b9550604088013591508082111561257d57600080fd5b5061258a888289016121af565b935050612599606087016120cf565b915061237d60808701612107565b60008060008060008060c087890312156125c057600080fd5b86359550602087013567ffffffffffffffff808211156125df57600080fd5b6125eb8a838b016121af565b9650604089013591508082111561260157600080fd5b61260d8a838b016121af565b9550606089013591508082111561262357600080fd5b61262f8a838b016121af565b945061263d60808a0161229c565b935060a089013591508082111561265357600080fd5b5061266089828a016121af565b9150509295509295509295565b600181811c9082168061268157607f821691505b6020821081036126a157634e487b7160e01b600052602260045260246000fd5b50919050565b600082516126b9818460208701612136565b9190910192915050565b6000602082840312156126d557600080fd5b5051919050565b82815260406020820152600061204f604083018461215a565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60c0815260006127a060c083018961215a565b6001600160a01b03888116602085015283820360408501526127c2828961215a565b63ffffffff9790971660608501529490941660808301525060a00152509392505050565b600060018060a01b03808616835260606020840152612808606084018661215a565b9150808416604084015250949350505050565b60408152600061282e604083018561215a565b8281036020840152612840818561215a565b95945050505050565b63ffffffff60e01b8416815260606020820152600061286b606083018561215a565b8281036040840152611fcc818561215a565b6001600160a01b038316815260406020820181905260009061204f9083018461215a565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036128d0576128d06128a1565b6001019392505050565b60c0815260006128ed60c083018961215a565b82810360208401526128ff818961215a565b6001600160a01b0397909716604084015250506001600160e01b031993909316606084015263ffffffff91909116608083015260a09091015292915050565b601f8211156108c557600081815260208120601f850160051c810160208610156129655750805b601f850160051c820191505b8181101561298457828155600101612971565b505050505050565b815167ffffffffffffffff8111156129a6576129a6612199565b6129ba816129b4845461266d565b8461293e565b602080601f8311600181146129ef57600084156129d75750858301515b600019600386901b1c1916600185901b178555612984565b600085815260208120601f198616915b82811015612a1e578886015182559484019460019091019084016129ff565b5085821015612a3c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b838152826020820152606060408201526000612840606083018461215a565b600060208284031215612ac857600080fd5b81518015158114611ef757600080fd5b60018060a01b0385168152836020820152826040820152608060608201526000611fcc608083018461215a565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b3d816017850160208801612136565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b6e816028840160208801612136565b01602801949350505050565b80820281158282048414176106e3576106e36128a1565b808201808211156106e3576106e36128a1565b634e487b7160e01b600052603260045260246000fd5b600081612bc957612bc96128a1565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122025b46f8fad47d16eafcdf8d62480c72c5b3a23905b1704edd11a2eeedaac71e864736f6c63430008130033",
}

// FunctionGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use FunctionGatewayMetaData.ABI instead.
var FunctionGatewayABI = FunctionGatewayMetaData.ABI

// FunctionGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FunctionGatewayMetaData.Bin instead.
var FunctionGatewayBin = FunctionGatewayMetaData.Bin

// DeployFunctionGateway deploys a new Ethereum contract, binding an instance of FunctionGateway to it.
func DeployFunctionGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FunctionGateway, error) {
	parsed, err := FunctionGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FunctionGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FunctionGateway{FunctionGatewayCaller: FunctionGatewayCaller{contract: contract}, FunctionGatewayTransactor: FunctionGatewayTransactor{contract: contract}, FunctionGatewayFilterer: FunctionGatewayFilterer{contract: contract}}, nil
}

// FunctionGateway is an auto generated Go binding around an Ethereum contract.
type FunctionGateway struct {
	FunctionGatewayCaller     // Read-only binding to the contract
	FunctionGatewayTransactor // Write-only binding to the contract
	FunctionGatewayFilterer   // Log filterer for contract events
}

// FunctionGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type FunctionGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FunctionGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FunctionGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FunctionGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FunctionGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FunctionGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FunctionGatewaySession struct {
	Contract     *FunctionGateway  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FunctionGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FunctionGatewayCallerSession struct {
	Contract *FunctionGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// FunctionGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FunctionGatewayTransactorSession struct {
	Contract     *FunctionGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// FunctionGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type FunctionGatewayRaw struct {
	Contract *FunctionGateway // Generic contract binding to access the raw methods on
}

// FunctionGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FunctionGatewayCallerRaw struct {
	Contract *FunctionGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// FunctionGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FunctionGatewayTransactorRaw struct {
	Contract *FunctionGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFunctionGateway creates a new instance of FunctionGateway, bound to a specific deployed contract.
func NewFunctionGateway(address common.Address, backend bind.ContractBackend) (*FunctionGateway, error) {
	contract, err := bindFunctionGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FunctionGateway{FunctionGatewayCaller: FunctionGatewayCaller{contract: contract}, FunctionGatewayTransactor: FunctionGatewayTransactor{contract: contract}, FunctionGatewayFilterer: FunctionGatewayFilterer{contract: contract}}, nil
}

// NewFunctionGatewayCaller creates a new read-only instance of FunctionGateway, bound to a specific deployed contract.
func NewFunctionGatewayCaller(address common.Address, caller bind.ContractCaller) (*FunctionGatewayCaller, error) {
	contract, err := bindFunctionGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayCaller{contract: contract}, nil
}

// NewFunctionGatewayTransactor creates a new write-only instance of FunctionGateway, bound to a specific deployed contract.
func NewFunctionGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*FunctionGatewayTransactor, error) {
	contract, err := bindFunctionGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayTransactor{contract: contract}, nil
}

// NewFunctionGatewayFilterer creates a new log filterer instance of FunctionGateway, bound to a specific deployed contract.
func NewFunctionGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*FunctionGatewayFilterer, error) {
	contract, err := bindFunctionGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayFilterer{contract: contract}, nil
}

// bindFunctionGateway binds a generic wrapper to an already deployed contract.
func bindFunctionGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FunctionGatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FunctionGateway *FunctionGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FunctionGateway.Contract.FunctionGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FunctionGateway *FunctionGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionGateway.Contract.FunctionGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FunctionGateway *FunctionGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FunctionGateway.Contract.FunctionGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FunctionGateway *FunctionGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FunctionGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FunctionGateway *FunctionGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FunctionGateway *FunctionGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FunctionGateway.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _FunctionGateway.Contract.DEFAULTADMINROLE(&_FunctionGateway.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _FunctionGateway.Contract.DEFAULTADMINROLE(&_FunctionGateway.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) GUARDIANROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "GUARDIAN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) GUARDIANROLE() ([32]byte, error) {
	return _FunctionGateway.Contract.GUARDIANROLE(&_FunctionGateway.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) GUARDIANROLE() ([32]byte, error) {
	return _FunctionGateway.Contract.GUARDIANROLE(&_FunctionGateway.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) TIMELOCKROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "TIMELOCK_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) TIMELOCKROLE() ([32]byte, error) {
	return _FunctionGateway.Contract.TIMELOCKROLE(&_FunctionGateway.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) TIMELOCKROLE() ([32]byte, error) {
	return _FunctionGateway.Contract.TIMELOCKROLE(&_FunctionGateway.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_FunctionGateway *FunctionGatewayCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_FunctionGateway *FunctionGatewaySession) VERSION() (string, error) {
	return _FunctionGateway.Contract.VERSION(&_FunctionGateway.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_FunctionGateway *FunctionGatewayCallerSession) VERSION() (string, error) {
	return _FunctionGateway.Contract.VERSION(&_FunctionGateway.CallOpts)
}

// FeeVault is a free data retrieval call binding the contract method 0x478222c2.
//
// Solidity: function feeVault() view returns(address)
func (_FunctionGateway *FunctionGatewayCaller) FeeVault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "feeVault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeVault is a free data retrieval call binding the contract method 0x478222c2.
//
// Solidity: function feeVault() view returns(address)
func (_FunctionGateway *FunctionGatewaySession) FeeVault() (common.Address, error) {
	return _FunctionGateway.Contract.FeeVault(&_FunctionGateway.CallOpts)
}

// FeeVault is a free data retrieval call binding the contract method 0x478222c2.
//
// Solidity: function feeVault() view returns(address)
func (_FunctionGateway *FunctionGatewayCallerSession) FeeVault() (common.Address, error) {
	return _FunctionGateway.Contract.FeeVault(&_FunctionGateway.CallOpts)
}

// GetFunctionId is a free data retrieval call binding the contract method 0x9538f56f.
//
// Solidity: function getFunctionId(address _owner, string _name) pure returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewayCaller) GetFunctionId(opts *bind.CallOpts, _owner common.Address, _name string) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "getFunctionId", _owner, _name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetFunctionId is a free data retrieval call binding the contract method 0x9538f56f.
//
// Solidity: function getFunctionId(address _owner, string _name) pure returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewaySession) GetFunctionId(_owner common.Address, _name string) ([32]byte, error) {
	return _FunctionGateway.Contract.GetFunctionId(&_FunctionGateway.CallOpts, _owner, _name)
}

// GetFunctionId is a free data retrieval call binding the contract method 0x9538f56f.
//
// Solidity: function getFunctionId(address _owner, string _name) pure returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewayCallerSession) GetFunctionId(_owner common.Address, _name string) ([32]byte, error) {
	return _FunctionGateway.Contract.GetFunctionId(&_FunctionGateway.CallOpts, _owner, _name)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _FunctionGateway.Contract.GetRoleAdmin(&_FunctionGateway.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _FunctionGateway.Contract.GetRoleAdmin(&_FunctionGateway.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FunctionGateway *FunctionGatewayCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FunctionGateway *FunctionGatewaySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _FunctionGateway.Contract.HasRole(&_FunctionGateway.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FunctionGateway *FunctionGatewayCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _FunctionGateway.Contract.HasRole(&_FunctionGateway.CallOpts, role, account)
}

// IsCallback is a free data retrieval call binding the contract method 0x05d7c1cf.
//
// Solidity: function isCallback() view returns(bool)
func (_FunctionGateway *FunctionGatewayCaller) IsCallback(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "isCallback")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCallback is a free data retrieval call binding the contract method 0x05d7c1cf.
//
// Solidity: function isCallback() view returns(bool)
func (_FunctionGateway *FunctionGatewaySession) IsCallback() (bool, error) {
	return _FunctionGateway.Contract.IsCallback(&_FunctionGateway.CallOpts)
}

// IsCallback is a free data retrieval call binding the contract method 0x05d7c1cf.
//
// Solidity: function isCallback() view returns(bool)
func (_FunctionGateway *FunctionGatewayCallerSession) IsCallback() (bool, error) {
	return _FunctionGateway.Contract.IsCallback(&_FunctionGateway.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_FunctionGateway *FunctionGatewayCaller) Nonce(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_FunctionGateway *FunctionGatewaySession) Nonce() (uint32, error) {
	return _FunctionGateway.Contract.Nonce(&_FunctionGateway.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_FunctionGateway *FunctionGatewayCallerSession) Nonce() (uint32, error) {
	return _FunctionGateway.Contract.Nonce(&_FunctionGateway.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) ProxiableUUID() ([32]byte, error) {
	return _FunctionGateway.Contract.ProxiableUUID(&_FunctionGateway.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) ProxiableUUID() ([32]byte, error) {
	return _FunctionGateway.Contract.ProxiableUUID(&_FunctionGateway.CallOpts)
}

// Requests is a free data retrieval call binding the contract method 0x0ab469b0.
//
// Solidity: function requests(uint32 ) view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) Requests(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "requests", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Requests is a free data retrieval call binding the contract method 0x0ab469b0.
//
// Solidity: function requests(uint32 ) view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) Requests(arg0 uint32) ([32]byte, error) {
	return _FunctionGateway.Contract.Requests(&_FunctionGateway.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x0ab469b0.
//
// Solidity: function requests(uint32 ) view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) Requests(arg0 uint32) ([32]byte, error) {
	return _FunctionGateway.Contract.Requests(&_FunctionGateway.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FunctionGateway *FunctionGatewayCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FunctionGateway *FunctionGatewaySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FunctionGateway.Contract.SupportsInterface(&_FunctionGateway.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FunctionGateway *FunctionGatewayCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FunctionGateway.Contract.SupportsInterface(&_FunctionGateway.CallOpts, interfaceId)
}

// VerifiedCall is a free data retrieval call binding the contract method 0x176e62fd.
//
// Solidity: function verifiedCall(bytes32 _functionId, bytes _input) view returns(bytes)
func (_FunctionGateway *FunctionGatewayCaller) VerifiedCall(opts *bind.CallOpts, _functionId [32]byte, _input []byte) ([]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "verifiedCall", _functionId, _input)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// VerifiedCall is a free data retrieval call binding the contract method 0x176e62fd.
//
// Solidity: function verifiedCall(bytes32 _functionId, bytes _input) view returns(bytes)
func (_FunctionGateway *FunctionGatewaySession) VerifiedCall(_functionId [32]byte, _input []byte) ([]byte, error) {
	return _FunctionGateway.Contract.VerifiedCall(&_FunctionGateway.CallOpts, _functionId, _input)
}

// VerifiedCall is a free data retrieval call binding the contract method 0x176e62fd.
//
// Solidity: function verifiedCall(bytes32 _functionId, bytes _input) view returns(bytes)
func (_FunctionGateway *FunctionGatewayCallerSession) VerifiedCall(_functionId [32]byte, _input []byte) ([]byte, error) {
	return _FunctionGateway.Contract.VerifiedCall(&_FunctionGateway.CallOpts, _functionId, _input)
}

// VerifiedFunctionId is a free data retrieval call binding the contract method 0x8157ce2b.
//
// Solidity: function verifiedFunctionId() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) VerifiedFunctionId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "verifiedFunctionId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VerifiedFunctionId is a free data retrieval call binding the contract method 0x8157ce2b.
//
// Solidity: function verifiedFunctionId() view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) VerifiedFunctionId() ([32]byte, error) {
	return _FunctionGateway.Contract.VerifiedFunctionId(&_FunctionGateway.CallOpts)
}

// VerifiedFunctionId is a free data retrieval call binding the contract method 0x8157ce2b.
//
// Solidity: function verifiedFunctionId() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) VerifiedFunctionId() ([32]byte, error) {
	return _FunctionGateway.Contract.VerifiedFunctionId(&_FunctionGateway.CallOpts)
}

// VerifiedInputHash is a free data retrieval call binding the contract method 0x80e0bbb0.
//
// Solidity: function verifiedInputHash() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCaller) VerifiedInputHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "verifiedInputHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VerifiedInputHash is a free data retrieval call binding the contract method 0x80e0bbb0.
//
// Solidity: function verifiedInputHash() view returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) VerifiedInputHash() ([32]byte, error) {
	return _FunctionGateway.Contract.VerifiedInputHash(&_FunctionGateway.CallOpts)
}

// VerifiedInputHash is a free data retrieval call binding the contract method 0x80e0bbb0.
//
// Solidity: function verifiedInputHash() view returns(bytes32)
func (_FunctionGateway *FunctionGatewayCallerSession) VerifiedInputHash() ([32]byte, error) {
	return _FunctionGateway.Contract.VerifiedInputHash(&_FunctionGateway.CallOpts)
}

// VerifiedOutput is a free data retrieval call binding the contract method 0x173869f0.
//
// Solidity: function verifiedOutput() view returns(bytes)
func (_FunctionGateway *FunctionGatewayCaller) VerifiedOutput(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "verifiedOutput")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// VerifiedOutput is a free data retrieval call binding the contract method 0x173869f0.
//
// Solidity: function verifiedOutput() view returns(bytes)
func (_FunctionGateway *FunctionGatewaySession) VerifiedOutput() ([]byte, error) {
	return _FunctionGateway.Contract.VerifiedOutput(&_FunctionGateway.CallOpts)
}

// VerifiedOutput is a free data retrieval call binding the contract method 0x173869f0.
//
// Solidity: function verifiedOutput() view returns(bytes)
func (_FunctionGateway *FunctionGatewayCallerSession) VerifiedOutput() ([]byte, error) {
	return _FunctionGateway.Contract.VerifiedOutput(&_FunctionGateway.CallOpts)
}

// VerifierOwners is a free data retrieval call binding the contract method 0x8bcfc3a0.
//
// Solidity: function verifierOwners(bytes32 ) view returns(address)
func (_FunctionGateway *FunctionGatewayCaller) VerifierOwners(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "verifierOwners", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierOwners is a free data retrieval call binding the contract method 0x8bcfc3a0.
//
// Solidity: function verifierOwners(bytes32 ) view returns(address)
func (_FunctionGateway *FunctionGatewaySession) VerifierOwners(arg0 [32]byte) (common.Address, error) {
	return _FunctionGateway.Contract.VerifierOwners(&_FunctionGateway.CallOpts, arg0)
}

// VerifierOwners is a free data retrieval call binding the contract method 0x8bcfc3a0.
//
// Solidity: function verifierOwners(bytes32 ) view returns(address)
func (_FunctionGateway *FunctionGatewayCallerSession) VerifierOwners(arg0 [32]byte) (common.Address, error) {
	return _FunctionGateway.Contract.VerifierOwners(&_FunctionGateway.CallOpts, arg0)
}

// Verifiers is a free data retrieval call binding the contract method 0xefe1c950.
//
// Solidity: function verifiers(bytes32 ) view returns(address)
func (_FunctionGateway *FunctionGatewayCaller) Verifiers(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _FunctionGateway.contract.Call(opts, &out, "verifiers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifiers is a free data retrieval call binding the contract method 0xefe1c950.
//
// Solidity: function verifiers(bytes32 ) view returns(address)
func (_FunctionGateway *FunctionGatewaySession) Verifiers(arg0 [32]byte) (common.Address, error) {
	return _FunctionGateway.Contract.Verifiers(&_FunctionGateway.CallOpts, arg0)
}

// Verifiers is a free data retrieval call binding the contract method 0xefe1c950.
//
// Solidity: function verifiers(bytes32 ) view returns(address)
func (_FunctionGateway *FunctionGatewayCallerSession) Verifiers(arg0 [32]byte) (common.Address, error) {
	return _FunctionGateway.Contract.Verifiers(&_FunctionGateway.CallOpts, arg0)
}

// DeployAndRegisterFunction is a paid mutator transaction binding the contract method 0x5c74ad56.
//
// Solidity: function deployAndRegisterFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_FunctionGateway *FunctionGatewayTransactor) DeployAndRegisterFunction(opts *bind.TransactOpts, _bytecode []byte, _name string) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "deployAndRegisterFunction", _bytecode, _name)
}

// DeployAndRegisterFunction is a paid mutator transaction binding the contract method 0x5c74ad56.
//
// Solidity: function deployAndRegisterFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_FunctionGateway *FunctionGatewaySession) DeployAndRegisterFunction(_bytecode []byte, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.DeployAndRegisterFunction(&_FunctionGateway.TransactOpts, _bytecode, _name)
}

// DeployAndRegisterFunction is a paid mutator transaction binding the contract method 0x5c74ad56.
//
// Solidity: function deployAndRegisterFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_FunctionGateway *FunctionGatewayTransactorSession) DeployAndRegisterFunction(_bytecode []byte, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.DeployAndRegisterFunction(&_FunctionGateway.TransactOpts, _bytecode, _name)
}

// DeployAndUpdateFunction is a paid mutator transaction binding the contract method 0xb63755e5.
//
// Solidity: function deployAndUpdateFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_FunctionGateway *FunctionGatewayTransactor) DeployAndUpdateFunction(opts *bind.TransactOpts, _bytecode []byte, _name string) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "deployAndUpdateFunction", _bytecode, _name)
}

// DeployAndUpdateFunction is a paid mutator transaction binding the contract method 0xb63755e5.
//
// Solidity: function deployAndUpdateFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_FunctionGateway *FunctionGatewaySession) DeployAndUpdateFunction(_bytecode []byte, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.DeployAndUpdateFunction(&_FunctionGateway.TransactOpts, _bytecode, _name)
}

// DeployAndUpdateFunction is a paid mutator transaction binding the contract method 0xb63755e5.
//
// Solidity: function deployAndUpdateFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_FunctionGateway *FunctionGatewayTransactorSession) DeployAndUpdateFunction(_bytecode []byte, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.DeployAndUpdateFunction(&_FunctionGateway.TransactOpts, _bytecode, _name)
}

// FulfillCall is a paid mutator transaction binding the contract method 0xbac2a106.
//
// Solidity: function fulfillCall(bytes32 _functionId, bytes _input, bytes _output, bytes _proof, address _callbackAddress, bytes _callbackData) returns()
func (_FunctionGateway *FunctionGatewayTransactor) FulfillCall(opts *bind.TransactOpts, _functionId [32]byte, _input []byte, _output []byte, _proof []byte, _callbackAddress common.Address, _callbackData []byte) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "fulfillCall", _functionId, _input, _output, _proof, _callbackAddress, _callbackData)
}

// FulfillCall is a paid mutator transaction binding the contract method 0xbac2a106.
//
// Solidity: function fulfillCall(bytes32 _functionId, bytes _input, bytes _output, bytes _proof, address _callbackAddress, bytes _callbackData) returns()
func (_FunctionGateway *FunctionGatewaySession) FulfillCall(_functionId [32]byte, _input []byte, _output []byte, _proof []byte, _callbackAddress common.Address, _callbackData []byte) (*types.Transaction, error) {
	return _FunctionGateway.Contract.FulfillCall(&_FunctionGateway.TransactOpts, _functionId, _input, _output, _proof, _callbackAddress, _callbackData)
}

// FulfillCall is a paid mutator transaction binding the contract method 0xbac2a106.
//
// Solidity: function fulfillCall(bytes32 _functionId, bytes _input, bytes _output, bytes _proof, address _callbackAddress, bytes _callbackData) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) FulfillCall(_functionId [32]byte, _input []byte, _output []byte, _proof []byte, _callbackAddress common.Address, _callbackData []byte) (*types.Transaction, error) {
	return _FunctionGateway.Contract.FulfillCall(&_FunctionGateway.TransactOpts, _functionId, _input, _output, _proof, _callbackAddress, _callbackData)
}

// FulfillCallback is a paid mutator transaction binding the contract method 0x78370ebd.
//
// Solidity: function fulfillCallback(uint32 _nonce, bytes32 _functionId, bytes32 _inputHash, address _callbackAddress, bytes4 _callbackSelector, uint32 _callbackGasLimit, bytes _context, bytes _output, bytes _proof) returns()
func (_FunctionGateway *FunctionGatewayTransactor) FulfillCallback(opts *bind.TransactOpts, _nonce uint32, _functionId [32]byte, _inputHash [32]byte, _callbackAddress common.Address, _callbackSelector [4]byte, _callbackGasLimit uint32, _context []byte, _output []byte, _proof []byte) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "fulfillCallback", _nonce, _functionId, _inputHash, _callbackAddress, _callbackSelector, _callbackGasLimit, _context, _output, _proof)
}

// FulfillCallback is a paid mutator transaction binding the contract method 0x78370ebd.
//
// Solidity: function fulfillCallback(uint32 _nonce, bytes32 _functionId, bytes32 _inputHash, address _callbackAddress, bytes4 _callbackSelector, uint32 _callbackGasLimit, bytes _context, bytes _output, bytes _proof) returns()
func (_FunctionGateway *FunctionGatewaySession) FulfillCallback(_nonce uint32, _functionId [32]byte, _inputHash [32]byte, _callbackAddress common.Address, _callbackSelector [4]byte, _callbackGasLimit uint32, _context []byte, _output []byte, _proof []byte) (*types.Transaction, error) {
	return _FunctionGateway.Contract.FulfillCallback(&_FunctionGateway.TransactOpts, _nonce, _functionId, _inputHash, _callbackAddress, _callbackSelector, _callbackGasLimit, _context, _output, _proof)
}

// FulfillCallback is a paid mutator transaction binding the contract method 0x78370ebd.
//
// Solidity: function fulfillCallback(uint32 _nonce, bytes32 _functionId, bytes32 _inputHash, address _callbackAddress, bytes4 _callbackSelector, uint32 _callbackGasLimit, bytes _context, bytes _output, bytes _proof) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) FulfillCallback(_nonce uint32, _functionId [32]byte, _inputHash [32]byte, _callbackAddress common.Address, _callbackSelector [4]byte, _callbackGasLimit uint32, _context []byte, _output []byte, _proof []byte) (*types.Transaction, error) {
	return _FunctionGateway.Contract.FulfillCallback(&_FunctionGateway.TransactOpts, _nonce, _functionId, _inputHash, _callbackAddress, _callbackSelector, _callbackGasLimit, _context, _output, _proof)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewayTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewaySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.GrantRole(&_FunctionGateway.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.GrantRole(&_FunctionGateway.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _timelock, address _guardian) returns()
func (_FunctionGateway *FunctionGatewayTransactor) Initialize(opts *bind.TransactOpts, _timelock common.Address, _guardian common.Address) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "initialize", _timelock, _guardian)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _timelock, address _guardian) returns()
func (_FunctionGateway *FunctionGatewaySession) Initialize(_timelock common.Address, _guardian common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.Initialize(&_FunctionGateway.TransactOpts, _timelock, _guardian)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _timelock, address _guardian) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) Initialize(_timelock common.Address, _guardian common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.Initialize(&_FunctionGateway.TransactOpts, _timelock, _guardian)
}

// RegisterFunction is a paid mutator transaction binding the contract method 0x68ff41b1.
//
// Solidity: function registerFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewayTransactor) RegisterFunction(opts *bind.TransactOpts, _verifier common.Address, _name string) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "registerFunction", _verifier, _name)
}

// RegisterFunction is a paid mutator transaction binding the contract method 0x68ff41b1.
//
// Solidity: function registerFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewaySession) RegisterFunction(_verifier common.Address, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RegisterFunction(&_FunctionGateway.TransactOpts, _verifier, _name)
}

// RegisterFunction is a paid mutator transaction binding the contract method 0x68ff41b1.
//
// Solidity: function registerFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewayTransactorSession) RegisterFunction(_verifier common.Address, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RegisterFunction(&_FunctionGateway.TransactOpts, _verifier, _name)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewayTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewaySession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RenounceRole(&_FunctionGateway.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RenounceRole(&_FunctionGateway.TransactOpts, role, account)
}

// RequestCall is a paid mutator transaction binding the contract method 0x436a61d5.
//
// Solidity: function requestCall(bytes32 _functionId, bytes _input, address _entryAddress, bytes _entryCalldata, uint32 _entryGasLimit) payable returns()
func (_FunctionGateway *FunctionGatewayTransactor) RequestCall(opts *bind.TransactOpts, _functionId [32]byte, _input []byte, _entryAddress common.Address, _entryCalldata []byte, _entryGasLimit uint32) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "requestCall", _functionId, _input, _entryAddress, _entryCalldata, _entryGasLimit)
}

// RequestCall is a paid mutator transaction binding the contract method 0x436a61d5.
//
// Solidity: function requestCall(bytes32 _functionId, bytes _input, address _entryAddress, bytes _entryCalldata, uint32 _entryGasLimit) payable returns()
func (_FunctionGateway *FunctionGatewaySession) RequestCall(_functionId [32]byte, _input []byte, _entryAddress common.Address, _entryCalldata []byte, _entryGasLimit uint32) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RequestCall(&_FunctionGateway.TransactOpts, _functionId, _input, _entryAddress, _entryCalldata, _entryGasLimit)
}

// RequestCall is a paid mutator transaction binding the contract method 0x436a61d5.
//
// Solidity: function requestCall(bytes32 _functionId, bytes _input, address _entryAddress, bytes _entryCalldata, uint32 _entryGasLimit) payable returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) RequestCall(_functionId [32]byte, _input []byte, _entryAddress common.Address, _entryCalldata []byte, _entryGasLimit uint32) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RequestCall(&_FunctionGateway.TransactOpts, _functionId, _input, _entryAddress, _entryCalldata, _entryGasLimit)
}

// RequestCallback is a paid mutator transaction binding the contract method 0xb3f04fdf.
//
// Solidity: function requestCallback(bytes32 _functionId, bytes _input, bytes _context, bytes4 _callbackSelector, uint32 _callbackGasLimit) payable returns(bytes32)
func (_FunctionGateway *FunctionGatewayTransactor) RequestCallback(opts *bind.TransactOpts, _functionId [32]byte, _input []byte, _context []byte, _callbackSelector [4]byte, _callbackGasLimit uint32) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "requestCallback", _functionId, _input, _context, _callbackSelector, _callbackGasLimit)
}

// RequestCallback is a paid mutator transaction binding the contract method 0xb3f04fdf.
//
// Solidity: function requestCallback(bytes32 _functionId, bytes _input, bytes _context, bytes4 _callbackSelector, uint32 _callbackGasLimit) payable returns(bytes32)
func (_FunctionGateway *FunctionGatewaySession) RequestCallback(_functionId [32]byte, _input []byte, _context []byte, _callbackSelector [4]byte, _callbackGasLimit uint32) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RequestCallback(&_FunctionGateway.TransactOpts, _functionId, _input, _context, _callbackSelector, _callbackGasLimit)
}

// RequestCallback is a paid mutator transaction binding the contract method 0xb3f04fdf.
//
// Solidity: function requestCallback(bytes32 _functionId, bytes _input, bytes _context, bytes4 _callbackSelector, uint32 _callbackGasLimit) payable returns(bytes32)
func (_FunctionGateway *FunctionGatewayTransactorSession) RequestCallback(_functionId [32]byte, _input []byte, _context []byte, _callbackSelector [4]byte, _callbackGasLimit uint32) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RequestCallback(&_FunctionGateway.TransactOpts, _functionId, _input, _context, _callbackSelector, _callbackGasLimit)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewayTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewaySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RevokeRole(&_FunctionGateway.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.RevokeRole(&_FunctionGateway.TransactOpts, role, account)
}

// UpdateFunction is a paid mutator transaction binding the contract method 0xbd58c4bb.
//
// Solidity: function updateFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewayTransactor) UpdateFunction(opts *bind.TransactOpts, _verifier common.Address, _name string) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "updateFunction", _verifier, _name)
}

// UpdateFunction is a paid mutator transaction binding the contract method 0xbd58c4bb.
//
// Solidity: function updateFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewaySession) UpdateFunction(_verifier common.Address, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.UpdateFunction(&_FunctionGateway.TransactOpts, _verifier, _name)
}

// UpdateFunction is a paid mutator transaction binding the contract method 0xbd58c4bb.
//
// Solidity: function updateFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_FunctionGateway *FunctionGatewayTransactorSession) UpdateFunction(_verifier common.Address, _name string) (*types.Transaction, error) {
	return _FunctionGateway.Contract.UpdateFunction(&_FunctionGateway.TransactOpts, _verifier, _name)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_FunctionGateway *FunctionGatewayTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_FunctionGateway *FunctionGatewaySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.UpgradeTo(&_FunctionGateway.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _FunctionGateway.Contract.UpgradeTo(&_FunctionGateway.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FunctionGateway *FunctionGatewayTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FunctionGateway.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FunctionGateway *FunctionGatewaySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FunctionGateway.Contract.UpgradeToAndCall(&_FunctionGateway.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FunctionGateway *FunctionGatewayTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FunctionGateway.Contract.UpgradeToAndCall(&_FunctionGateway.TransactOpts, newImplementation, data)
}

// FunctionGatewayAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the FunctionGateway contract.
type FunctionGatewayAdminChangedIterator struct {
	Event *FunctionGatewayAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayAdminChanged represents a AdminChanged event raised by the FunctionGateway contract.
type FunctionGatewayAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_FunctionGateway *FunctionGatewayFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*FunctionGatewayAdminChangedIterator, error) {

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayAdminChangedIterator{contract: _FunctionGateway.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_FunctionGateway *FunctionGatewayFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *FunctionGatewayAdminChanged) (event.Subscription, error) {

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayAdminChanged)
				if err := _FunctionGateway.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_FunctionGateway *FunctionGatewayFilterer) ParseAdminChanged(log types.Log) (*FunctionGatewayAdminChanged, error) {
	event := new(FunctionGatewayAdminChanged)
	if err := _FunctionGateway.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the FunctionGateway contract.
type FunctionGatewayBeaconUpgradedIterator struct {
	Event *FunctionGatewayBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayBeaconUpgraded represents a BeaconUpgraded event raised by the FunctionGateway contract.
type FunctionGatewayBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_FunctionGateway *FunctionGatewayFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*FunctionGatewayBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayBeaconUpgradedIterator{contract: _FunctionGateway.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_FunctionGateway *FunctionGatewayFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *FunctionGatewayBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayBeaconUpgraded)
				if err := _FunctionGateway.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_FunctionGateway *FunctionGatewayFilterer) ParseBeaconUpgraded(log types.Log) (*FunctionGatewayBeaconUpgraded, error) {
	event := new(FunctionGatewayBeaconUpgraded)
	if err := _FunctionGateway.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayCallIterator is returned from FilterCall and is used to iterate over the raw logs and unpacked data for Call events raised by the FunctionGateway contract.
type FunctionGatewayCallIterator struct {
	Event *FunctionGatewayCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayCall represents a Call event raised by the FunctionGateway contract.
type FunctionGatewayCall struct {
	FunctionId [32]byte
	InputHash  [32]byte
	OutputHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCall is a free log retrieval operation binding the contract event 0x41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15.
//
// Solidity: event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_FunctionGateway *FunctionGatewayFilterer) FilterCall(opts *bind.FilterOpts, functionId [][32]byte) (*FunctionGatewayCallIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "Call", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayCallIterator{contract: _FunctionGateway.contract, event: "Call", logs: logs, sub: sub}, nil
}

// WatchCall is a free log subscription operation binding the contract event 0x41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15.
//
// Solidity: event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_FunctionGateway *FunctionGatewayFilterer) WatchCall(opts *bind.WatchOpts, sink chan<- *FunctionGatewayCall, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "Call", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayCall)
				if err := _FunctionGateway.contract.UnpackLog(event, "Call", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCall is a log parse operation binding the contract event 0x41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15.
//
// Solidity: event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_FunctionGateway *FunctionGatewayFilterer) ParseCall(log types.Log) (*FunctionGatewayCall, error) {
	event := new(FunctionGatewayCall)
	if err := _FunctionGateway.contract.UnpackLog(event, "Call", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayDeployedIterator is returned from FilterDeployed and is used to iterate over the raw logs and unpacked data for Deployed events raised by the FunctionGateway contract.
type FunctionGatewayDeployedIterator struct {
	Event *FunctionGatewayDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayDeployed represents a Deployed event raised by the FunctionGateway contract.
type FunctionGatewayDeployed struct {
	BytecodeHash    [32]byte
	Salt            [32]byte
	DeployedAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployed is a free log retrieval operation binding the contract event 0x27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f532.
//
// Solidity: event Deployed(bytes32 indexed bytecodeHash, bytes32 indexed salt, address indexed deployedAddress)
func (_FunctionGateway *FunctionGatewayFilterer) FilterDeployed(opts *bind.FilterOpts, bytecodeHash [][32]byte, salt [][32]byte, deployedAddress []common.Address) (*FunctionGatewayDeployedIterator, error) {

	var bytecodeHashRule []interface{}
	for _, bytecodeHashItem := range bytecodeHash {
		bytecodeHashRule = append(bytecodeHashRule, bytecodeHashItem)
	}
	var saltRule []interface{}
	for _, saltItem := range salt {
		saltRule = append(saltRule, saltItem)
	}
	var deployedAddressRule []interface{}
	for _, deployedAddressItem := range deployedAddress {
		deployedAddressRule = append(deployedAddressRule, deployedAddressItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "Deployed", bytecodeHashRule, saltRule, deployedAddressRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayDeployedIterator{contract: _FunctionGateway.contract, event: "Deployed", logs: logs, sub: sub}, nil
}

// WatchDeployed is a free log subscription operation binding the contract event 0x27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f532.
//
// Solidity: event Deployed(bytes32 indexed bytecodeHash, bytes32 indexed salt, address indexed deployedAddress)
func (_FunctionGateway *FunctionGatewayFilterer) WatchDeployed(opts *bind.WatchOpts, sink chan<- *FunctionGatewayDeployed, bytecodeHash [][32]byte, salt [][32]byte, deployedAddress []common.Address) (event.Subscription, error) {

	var bytecodeHashRule []interface{}
	for _, bytecodeHashItem := range bytecodeHash {
		bytecodeHashRule = append(bytecodeHashRule, bytecodeHashItem)
	}
	var saltRule []interface{}
	for _, saltItem := range salt {
		saltRule = append(saltRule, saltItem)
	}
	var deployedAddressRule []interface{}
	for _, deployedAddressItem := range deployedAddress {
		deployedAddressRule = append(deployedAddressRule, deployedAddressItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "Deployed", bytecodeHashRule, saltRule, deployedAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayDeployed)
				if err := _FunctionGateway.contract.UnpackLog(event, "Deployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployed is a log parse operation binding the contract event 0x27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f532.
//
// Solidity: event Deployed(bytes32 indexed bytecodeHash, bytes32 indexed salt, address indexed deployedAddress)
func (_FunctionGateway *FunctionGatewayFilterer) ParseDeployed(log types.Log) (*FunctionGatewayDeployed, error) {
	event := new(FunctionGatewayDeployed)
	if err := _FunctionGateway.contract.UnpackLog(event, "Deployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayFunctionOwnerUpdatedIterator is returned from FilterFunctionOwnerUpdated and is used to iterate over the raw logs and unpacked data for FunctionOwnerUpdated events raised by the FunctionGateway contract.
type FunctionGatewayFunctionOwnerUpdatedIterator struct {
	Event *FunctionGatewayFunctionOwnerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayFunctionOwnerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayFunctionOwnerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayFunctionOwnerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayFunctionOwnerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayFunctionOwnerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayFunctionOwnerUpdated represents a FunctionOwnerUpdated event raised by the FunctionGateway contract.
type FunctionGatewayFunctionOwnerUpdated struct {
	FunctionId [32]byte
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionOwnerUpdated is a free log retrieval operation binding the contract event 0x376b0a13fca0286b5c7c73288ea980eb9d131fc8b996f7a46a49e0f90269aadf.
//
// Solidity: event FunctionOwnerUpdated(bytes32 indexed functionId, address owner)
func (_FunctionGateway *FunctionGatewayFilterer) FilterFunctionOwnerUpdated(opts *bind.FilterOpts, functionId [][32]byte) (*FunctionGatewayFunctionOwnerUpdatedIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "FunctionOwnerUpdated", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayFunctionOwnerUpdatedIterator{contract: _FunctionGateway.contract, event: "FunctionOwnerUpdated", logs: logs, sub: sub}, nil
}

// WatchFunctionOwnerUpdated is a free log subscription operation binding the contract event 0x376b0a13fca0286b5c7c73288ea980eb9d131fc8b996f7a46a49e0f90269aadf.
//
// Solidity: event FunctionOwnerUpdated(bytes32 indexed functionId, address owner)
func (_FunctionGateway *FunctionGatewayFilterer) WatchFunctionOwnerUpdated(opts *bind.WatchOpts, sink chan<- *FunctionGatewayFunctionOwnerUpdated, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "FunctionOwnerUpdated", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayFunctionOwnerUpdated)
				if err := _FunctionGateway.contract.UnpackLog(event, "FunctionOwnerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionOwnerUpdated is a log parse operation binding the contract event 0x376b0a13fca0286b5c7c73288ea980eb9d131fc8b996f7a46a49e0f90269aadf.
//
// Solidity: event FunctionOwnerUpdated(bytes32 indexed functionId, address owner)
func (_FunctionGateway *FunctionGatewayFilterer) ParseFunctionOwnerUpdated(log types.Log) (*FunctionGatewayFunctionOwnerUpdated, error) {
	event := new(FunctionGatewayFunctionOwnerUpdated)
	if err := _FunctionGateway.contract.UnpackLog(event, "FunctionOwnerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayFunctionRegisteredIterator is returned from FilterFunctionRegistered and is used to iterate over the raw logs and unpacked data for FunctionRegistered events raised by the FunctionGateway contract.
type FunctionGatewayFunctionRegisteredIterator struct {
	Event *FunctionGatewayFunctionRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayFunctionRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayFunctionRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayFunctionRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayFunctionRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayFunctionRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayFunctionRegistered represents a FunctionRegistered event raised by the FunctionGateway contract.
type FunctionGatewayFunctionRegistered struct {
	FunctionId [32]byte
	Verifier   common.Address
	Name       string
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionRegistered is a free log retrieval operation binding the contract event 0x52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea.
//
// Solidity: event FunctionRegistered(bytes32 indexed functionId, address verifier, string name, address owner)
func (_FunctionGateway *FunctionGatewayFilterer) FilterFunctionRegistered(opts *bind.FilterOpts, functionId [][32]byte) (*FunctionGatewayFunctionRegisteredIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "FunctionRegistered", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayFunctionRegisteredIterator{contract: _FunctionGateway.contract, event: "FunctionRegistered", logs: logs, sub: sub}, nil
}

// WatchFunctionRegistered is a free log subscription operation binding the contract event 0x52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea.
//
// Solidity: event FunctionRegistered(bytes32 indexed functionId, address verifier, string name, address owner)
func (_FunctionGateway *FunctionGatewayFilterer) WatchFunctionRegistered(opts *bind.WatchOpts, sink chan<- *FunctionGatewayFunctionRegistered, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "FunctionRegistered", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayFunctionRegistered)
				if err := _FunctionGateway.contract.UnpackLog(event, "FunctionRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionRegistered is a log parse operation binding the contract event 0x52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea.
//
// Solidity: event FunctionRegistered(bytes32 indexed functionId, address verifier, string name, address owner)
func (_FunctionGateway *FunctionGatewayFilterer) ParseFunctionRegistered(log types.Log) (*FunctionGatewayFunctionRegistered, error) {
	event := new(FunctionGatewayFunctionRegistered)
	if err := _FunctionGateway.contract.UnpackLog(event, "FunctionRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayFunctionVerifierUpdatedIterator is returned from FilterFunctionVerifierUpdated and is used to iterate over the raw logs and unpacked data for FunctionVerifierUpdated events raised by the FunctionGateway contract.
type FunctionGatewayFunctionVerifierUpdatedIterator struct {
	Event *FunctionGatewayFunctionVerifierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayFunctionVerifierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayFunctionVerifierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayFunctionVerifierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayFunctionVerifierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayFunctionVerifierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayFunctionVerifierUpdated represents a FunctionVerifierUpdated event raised by the FunctionGateway contract.
type FunctionGatewayFunctionVerifierUpdated struct {
	FunctionId [32]byte
	Verifier   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionVerifierUpdated is a free log retrieval operation binding the contract event 0xfc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736.
//
// Solidity: event FunctionVerifierUpdated(bytes32 indexed functionId, address verifier)
func (_FunctionGateway *FunctionGatewayFilterer) FilterFunctionVerifierUpdated(opts *bind.FilterOpts, functionId [][32]byte) (*FunctionGatewayFunctionVerifierUpdatedIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "FunctionVerifierUpdated", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayFunctionVerifierUpdatedIterator{contract: _FunctionGateway.contract, event: "FunctionVerifierUpdated", logs: logs, sub: sub}, nil
}

// WatchFunctionVerifierUpdated is a free log subscription operation binding the contract event 0xfc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736.
//
// Solidity: event FunctionVerifierUpdated(bytes32 indexed functionId, address verifier)
func (_FunctionGateway *FunctionGatewayFilterer) WatchFunctionVerifierUpdated(opts *bind.WatchOpts, sink chan<- *FunctionGatewayFunctionVerifierUpdated, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "FunctionVerifierUpdated", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayFunctionVerifierUpdated)
				if err := _FunctionGateway.contract.UnpackLog(event, "FunctionVerifierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionVerifierUpdated is a log parse operation binding the contract event 0xfc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736.
//
// Solidity: event FunctionVerifierUpdated(bytes32 indexed functionId, address verifier)
func (_FunctionGateway *FunctionGatewayFilterer) ParseFunctionVerifierUpdated(log types.Log) (*FunctionGatewayFunctionVerifierUpdated, error) {
	event := new(FunctionGatewayFunctionVerifierUpdated)
	if err := _FunctionGateway.contract.UnpackLog(event, "FunctionVerifierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FunctionGateway contract.
type FunctionGatewayInitializedIterator struct {
	Event *FunctionGatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayInitialized represents a Initialized event raised by the FunctionGateway contract.
type FunctionGatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FunctionGateway *FunctionGatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*FunctionGatewayInitializedIterator, error) {

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayInitializedIterator{contract: _FunctionGateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FunctionGateway *FunctionGatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FunctionGatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayInitialized)
				if err := _FunctionGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FunctionGateway *FunctionGatewayFilterer) ParseInitialized(log types.Log) (*FunctionGatewayInitialized, error) {
	event := new(FunctionGatewayInitialized)
	if err := _FunctionGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayRequestCallIterator is returned from FilterRequestCall and is used to iterate over the raw logs and unpacked data for RequestCall events raised by the FunctionGateway contract.
type FunctionGatewayRequestCallIterator struct {
	Event *FunctionGatewayRequestCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayRequestCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayRequestCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayRequestCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayRequestCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayRequestCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayRequestCall represents a RequestCall event raised by the FunctionGateway contract.
type FunctionGatewayRequestCall struct {
	FunctionId    [32]byte
	Input         []byte
	EntryAddress  common.Address
	EntryData     []byte
	EntryGasLimit uint32
	Sender        common.Address
	FeeAmount     *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRequestCall is a free log retrieval operation binding the contract event 0x88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3.
//
// Solidity: event RequestCall(bytes32 indexed functionId, bytes input, address entryAddress, bytes entryData, uint32 entryGasLimit, address sender, uint256 feeAmount)
func (_FunctionGateway *FunctionGatewayFilterer) FilterRequestCall(opts *bind.FilterOpts, functionId [][32]byte) (*FunctionGatewayRequestCallIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "RequestCall", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayRequestCallIterator{contract: _FunctionGateway.contract, event: "RequestCall", logs: logs, sub: sub}, nil
}

// WatchRequestCall is a free log subscription operation binding the contract event 0x88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3.
//
// Solidity: event RequestCall(bytes32 indexed functionId, bytes input, address entryAddress, bytes entryData, uint32 entryGasLimit, address sender, uint256 feeAmount)
func (_FunctionGateway *FunctionGatewayFilterer) WatchRequestCall(opts *bind.WatchOpts, sink chan<- *FunctionGatewayRequestCall, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "RequestCall", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayRequestCall)
				if err := _FunctionGateway.contract.UnpackLog(event, "RequestCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCall is a log parse operation binding the contract event 0x88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3.
//
// Solidity: event RequestCall(bytes32 indexed functionId, bytes input, address entryAddress, bytes entryData, uint32 entryGasLimit, address sender, uint256 feeAmount)
func (_FunctionGateway *FunctionGatewayFilterer) ParseRequestCall(log types.Log) (*FunctionGatewayRequestCall, error) {
	event := new(FunctionGatewayRequestCall)
	if err := _FunctionGateway.contract.UnpackLog(event, "RequestCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayRequestCallbackIterator is returned from FilterRequestCallback and is used to iterate over the raw logs and unpacked data for RequestCallback events raised by the FunctionGateway contract.
type FunctionGatewayRequestCallbackIterator struct {
	Event *FunctionGatewayRequestCallback // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayRequestCallbackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayRequestCallback)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayRequestCallback)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayRequestCallbackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayRequestCallbackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayRequestCallback represents a RequestCallback event raised by the FunctionGateway contract.
type FunctionGatewayRequestCallback struct {
	Nonce            uint32
	FunctionId       [32]byte
	Input            []byte
	Context          []byte
	CallbackAddress  common.Address
	CallbackSelector [4]byte
	CallbackGasLimit uint32
	FeeAmount        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterRequestCallback is a free log retrieval operation binding the contract event 0x22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93.
//
// Solidity: event RequestCallback(uint32 indexed nonce, bytes32 indexed functionId, bytes input, bytes context, address callbackAddress, bytes4 callbackSelector, uint32 callbackGasLimit, uint256 feeAmount)
func (_FunctionGateway *FunctionGatewayFilterer) FilterRequestCallback(opts *bind.FilterOpts, nonce []uint32, functionId [][32]byte) (*FunctionGatewayRequestCallbackIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "RequestCallback", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayRequestCallbackIterator{contract: _FunctionGateway.contract, event: "RequestCallback", logs: logs, sub: sub}, nil
}

// WatchRequestCallback is a free log subscription operation binding the contract event 0x22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93.
//
// Solidity: event RequestCallback(uint32 indexed nonce, bytes32 indexed functionId, bytes input, bytes context, address callbackAddress, bytes4 callbackSelector, uint32 callbackGasLimit, uint256 feeAmount)
func (_FunctionGateway *FunctionGatewayFilterer) WatchRequestCallback(opts *bind.WatchOpts, sink chan<- *FunctionGatewayRequestCallback, nonce []uint32, functionId [][32]byte) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "RequestCallback", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayRequestCallback)
				if err := _FunctionGateway.contract.UnpackLog(event, "RequestCallback", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCallback is a log parse operation binding the contract event 0x22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93.
//
// Solidity: event RequestCallback(uint32 indexed nonce, bytes32 indexed functionId, bytes input, bytes context, address callbackAddress, bytes4 callbackSelector, uint32 callbackGasLimit, uint256 feeAmount)
func (_FunctionGateway *FunctionGatewayFilterer) ParseRequestCallback(log types.Log) (*FunctionGatewayRequestCallback, error) {
	event := new(FunctionGatewayRequestCallback)
	if err := _FunctionGateway.contract.UnpackLog(event, "RequestCallback", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayRequestFulfilledIterator is returned from FilterRequestFulfilled and is used to iterate over the raw logs and unpacked data for RequestFulfilled events raised by the FunctionGateway contract.
type FunctionGatewayRequestFulfilledIterator struct {
	Event *FunctionGatewayRequestFulfilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayRequestFulfilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayRequestFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayRequestFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayRequestFulfilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayRequestFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayRequestFulfilled represents a RequestFulfilled event raised by the FunctionGateway contract.
type FunctionGatewayRequestFulfilled struct {
	Nonce      uint32
	FunctionId [32]byte
	InputHash  [32]byte
	OutputHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRequestFulfilled is a free log retrieval operation binding the contract event 0x361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff2.
//
// Solidity: event RequestFulfilled(uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_FunctionGateway *FunctionGatewayFilterer) FilterRequestFulfilled(opts *bind.FilterOpts, nonce []uint32, functionId [][32]byte) (*FunctionGatewayRequestFulfilledIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "RequestFulfilled", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayRequestFulfilledIterator{contract: _FunctionGateway.contract, event: "RequestFulfilled", logs: logs, sub: sub}, nil
}

// WatchRequestFulfilled is a free log subscription operation binding the contract event 0x361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff2.
//
// Solidity: event RequestFulfilled(uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_FunctionGateway *FunctionGatewayFilterer) WatchRequestFulfilled(opts *bind.WatchOpts, sink chan<- *FunctionGatewayRequestFulfilled, nonce []uint32, functionId [][32]byte) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "RequestFulfilled", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayRequestFulfilled)
				if err := _FunctionGateway.contract.UnpackLog(event, "RequestFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestFulfilled is a log parse operation binding the contract event 0x361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff2.
//
// Solidity: event RequestFulfilled(uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_FunctionGateway *FunctionGatewayFilterer) ParseRequestFulfilled(log types.Log) (*FunctionGatewayRequestFulfilled, error) {
	event := new(FunctionGatewayRequestFulfilled)
	if err := _FunctionGateway.contract.UnpackLog(event, "RequestFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the FunctionGateway contract.
type FunctionGatewayRoleAdminChangedIterator struct {
	Event *FunctionGatewayRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayRoleAdminChanged represents a RoleAdminChanged event raised by the FunctionGateway contract.
type FunctionGatewayRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FunctionGateway *FunctionGatewayFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*FunctionGatewayRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayRoleAdminChangedIterator{contract: _FunctionGateway.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FunctionGateway *FunctionGatewayFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *FunctionGatewayRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayRoleAdminChanged)
				if err := _FunctionGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FunctionGateway *FunctionGatewayFilterer) ParseRoleAdminChanged(log types.Log) (*FunctionGatewayRoleAdminChanged, error) {
	event := new(FunctionGatewayRoleAdminChanged)
	if err := _FunctionGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the FunctionGateway contract.
type FunctionGatewayRoleGrantedIterator struct {
	Event *FunctionGatewayRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayRoleGranted represents a RoleGranted event raised by the FunctionGateway contract.
type FunctionGatewayRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FunctionGateway *FunctionGatewayFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*FunctionGatewayRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayRoleGrantedIterator{contract: _FunctionGateway.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FunctionGateway *FunctionGatewayFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *FunctionGatewayRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayRoleGranted)
				if err := _FunctionGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FunctionGateway *FunctionGatewayFilterer) ParseRoleGranted(log types.Log) (*FunctionGatewayRoleGranted, error) {
	event := new(FunctionGatewayRoleGranted)
	if err := _FunctionGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the FunctionGateway contract.
type FunctionGatewayRoleRevokedIterator struct {
	Event *FunctionGatewayRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayRoleRevoked represents a RoleRevoked event raised by the FunctionGateway contract.
type FunctionGatewayRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FunctionGateway *FunctionGatewayFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*FunctionGatewayRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayRoleRevokedIterator{contract: _FunctionGateway.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FunctionGateway *FunctionGatewayFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *FunctionGatewayRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayRoleRevoked)
				if err := _FunctionGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FunctionGateway *FunctionGatewayFilterer) ParseRoleRevoked(log types.Log) (*FunctionGatewayRoleRevoked, error) {
	event := new(FunctionGatewayRoleRevoked)
	if err := _FunctionGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FunctionGatewayUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the FunctionGateway contract.
type FunctionGatewayUpgradedIterator struct {
	Event *FunctionGatewayUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FunctionGatewayUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionGatewayUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FunctionGatewayUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FunctionGatewayUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FunctionGatewayUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FunctionGatewayUpgraded represents a Upgraded event raised by the FunctionGateway contract.
type FunctionGatewayUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FunctionGateway *FunctionGatewayFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*FunctionGatewayUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FunctionGateway.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &FunctionGatewayUpgradedIterator{contract: _FunctionGateway.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FunctionGateway *FunctionGatewayFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *FunctionGatewayUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FunctionGateway.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FunctionGatewayUpgraded)
				if err := _FunctionGateway.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FunctionGateway *FunctionGatewayFilterer) ParseUpgraded(log types.Log) (*FunctionGatewayUpgraded, error) {
	event := new(FunctionGatewayUpgraded)
	if err := _FunctionGateway.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
