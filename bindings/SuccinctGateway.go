// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SuccinctGatewayMetaData contains all meta data concerning the SuccinctGateway contract.
var SuccinctGatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"CallbackFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeploy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"name\":\"FunctionAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"inputHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"expectedRequestHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualOwner\",\"type\":\"address\"}],\"name\":\"NotFunctionOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"inputHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"outputHash\",\"type\":\"bytes32\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployedAddress\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FunctionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"FunctionVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"entryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"entryCalldata\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"entryGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"RequestCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"RequestCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"inputHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"outputHash\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeVault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeVault\",\"type\":\"address\"}],\"name\":\"SetFeeVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"deployAndRegisterFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"deployAndUpdateFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callbackData\",\"type\":\"bytes\"}],\"name\":\"fulfillCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_inputHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_context\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getFunctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_entryAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_entryCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_entryGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_context\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestCallback\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeVault\",\"type\":\"address\"}],\"name\":\"setFeeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"verifiedCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedFunctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedInputHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedOutput\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifierOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600254610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60025460ff90811614620000e5576002805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612e5e6200011f6000396000818161097d015281816109bd01528181610c0d01528181610c4d0152610cdc0152612e5e6000f3fe6080604052600436106101f95760003560e01c806380e0bbb01161010d578063b3f04fdf116100a0578063c0c53b8b1161006f578063c0c53b8b14610605578063d547741f14610625578063efe1c95014610645578063f288a2e21461067b578063ffa1ad74146106af57600080fd5b8063b3f04fdf14610592578063b63755e5146105a5578063bac2a106146105c5578063bd58c4bb146105e557600080fd5b80639538f56f116100dc5780639538f56f14610504578063a217fddf14610524578063a591f97f14610539578063affed0e01461055957600080fd5b806380e0bbb0146104815780638157ce2b146104985780638bcfc3a0146104ae57806391d14854146104e457600080fd5b806336568abe11610190578063478222c21161015f578063478222c2146103c45780634f1ef286146103fc57806352d1902d1461040f57806361f846c91461042457806378370ebd1461046157600080fd5b806336568abe146103515780633659cfe61461037157806340651ac114610391578063436a61d5146103b157600080fd5b8063176e62fd116101cc578063176e62fd146102ab578063248a9ca3146102cb57806324ea54f4146102fb5780632f2ff15d1461032f57600080fd5b806301ffc9a7146101fe57806305d7c1cf146102335780630ab469b01461024e578063173869f014610289575b600080fd5b34801561020a57600080fd5b5061021e61021936600461221b565b6106dd565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b506101025461021e9060ff1681565b34801561025a57600080fd5b5061027b61026936600461224a565b60fe6020526000908152604090205481565b60405190815260200161022a565b34801561029557600080fd5b5061029e610714565b60405161022a91906122b5565b3480156102b757600080fd5b5061029e6102c636600461236b565b6107a3565b3480156102d757600080fd5b5061027b6102e63660046123b2565b600090815260cb602052604090206001015490565b34801561030757600080fd5b5061027b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561033b57600080fd5b5061034f61034a3660046123e2565b6108cb565b005b34801561035d57600080fd5b5061034f61036c3660046123e2565b6108f5565b34801561037d57600080fd5b5061034f61038c36600461240e565b610973565b34801561039d57600080fd5b5061027b6103ac366004612429565b610a52565b61034f6103bf366004612487565b610b49565b3480156103d057600080fd5b5060fd546103e4906001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b61034f61040a366004612516565b610c03565b34801561041b57600080fd5b5061027b610ccf565b34801561043057600080fd5b5061044461043f36600461254e565b610d82565b604080519283526001600160a01b0390911660208301520161022a565b34801561046d57600080fd5b5061034f61047c3660046125b8565b610e6c565b34801561048d57600080fd5b5061027b6101005481565b3480156104a457600080fd5b5061027b60ff5481565b3480156104ba57600080fd5b506103e46104c93660046123b2565b6001602052600090815260409020546001600160a01b031681565b3480156104f057600080fd5b5061021e6104ff3660046123e2565b611096565b34801561051057600080fd5b5061027b61051f366004612516565b6110c1565b34801561053057600080fd5b5061027b600081565b34801561054557600080fd5b5061034f61055436600461240e565b6110f4565b34801561056557600080fd5b5060fd5461057d90600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161022a565b61027b6105a0366004612697565b611199565b3480156105b157600080fd5b506104446105c036600461271a565b61134f565b3480156105d157600080fd5b5061034f6105e0366004612774565b61142a565b3480156105f157600080fd5b5061027b610600366004612516565b6115db565b34801561061157600080fd5b5061034f61062036600461283a565b6116ce565b34801561063157600080fd5b5061034f6106403660046123e2565b61180a565b34801561065157600080fd5b506103e46106603660046123b2565b6000602081905290815260409020546001600160a01b031681565b34801561068757600080fd5b5061027b7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b3480156106bb57600080fd5b506040805180820190915260058152640312e302e360dc1b602082015261029e565b60006001600160e01b03198216637965db0b60e01b148061070e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61010180546107229061287d565b80601f016020809104026020016040519081016040528092919081815260200182805461074e9061287d565b801561079b5780601f106107705761010080835404028352916020019161079b565b820191906000526020600020905b81548152906001019060200180831161077e57829003601f168201915b505050505081565b606060006002836040516107b791906128b7565b602060405180830381855afa1580156107d4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107f791906128d3565b90508360ff5414801561080c57508061010054145b156108a557610101805461081f9061287d565b80601f016020809104026020016040519081016040528092919081815260200182805461084b9061287d565b80156108985780601f1061086d57610100808354040283529160200191610898565b820191906000526020600020905b81548152906001019060200180831161087b57829003601f168201915b505050505091505061070e565b838360405163aa74a2cb60e01b81526004016108c29291906128ec565b60405180910390fd5b600082815260cb60205260409020600101546108e68161182f565b6108f08383611839565b505050565b6001600160a01b03811633146109655760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108c2565b61096f82826118bf565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109bb5760405162461bcd60e51b81526004016108c290612905565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a04600080516020612de2833981519152546001600160a01b031690565b6001600160a01b031614610a2a5760405162461bcd60e51b81526004016108c290612951565b610a3381611926565b60408051600080825260208201909252610a4f9183919061196f565b50565b6000610a5e33836110c1565b6000818152602081905260409020549091506001600160a01b031615610a9a57604051635e34c78f60e01b8152600481018290526024016108c2565b6001600160a01b038316610ac1576040516302d48d1f60e61b815260040160405180910390fd5b600081815260016020908152604080832080546001600160a01b03808a166001600160a01b03199283161790925592849052928190208054938716939092169290921790555181907f52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea90610b3a9086908690899061299d565b60405180910390a29392505050565b847f88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3858585853334604051610b83969594939291906129d2565b60405180910390a260fd546001600160a01b031615610bfc5760fd546040516333bb7f9160e01b81523360048201526001600160a01b03909116906333bb7f919034906024016000604051808303818588803b158015610be257600080fd5b505af1158015610bf6573d6000803e3d6000fd5b50505050505b5050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c4b5760405162461bcd60e51b81526004016108c290612905565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c94600080516020612de2833981519152546001600160a01b031690565b6001600160a01b031614610cba5760405162461bcd60e51b81526004016108c290612951565b610cc382611926565b61096f8282600161196f565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d6f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108c2565b50600080516020612de283398151915290565b600080610d8f33846110c1565b6000818152602081905260409020549092506001600160a01b031615610dcb57604051635e34c78f60e01b8152600481018390526024016108c2565b600082815260016020526040902080546001600160a01b0319166001600160a01b038716179055610dfc8483611ada565b6000838152602081905260409081902080546001600160a01b0319166001600160a01b0384161790555190915082907f52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea90610e5c90849087908a9061299d565b60405180910390a2935093915050565b825160208401206000610e848b8b8b858c8c8c611b74565b63ffffffff8c16600090815260fe60205260409020549091508114610ee35763ffffffff8b16600081815260fe6020526040908190205490516310fc041760e31b815260048101929092526024820152604481018290526064016108c2565b63ffffffff8b16600090815260fe602052604080822082905551600290610f0b9087906128b7565b602060405180830381855afa158015610f28573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610f4b91906128d3565b9050610f598b8b8387611bf4565b610102805460ff191660011790556040516000906001600160a01b038b16908a90610f8a9089908b90602401612a2b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610fc891906128b7565b6000604051808303816000865af19150503d8060008114611005576040519150601f19603f3d011682016040523d82523d6000602084013e61100a565b606091505b5050610102805460ff1916905590508061103d578886886040516315c9414b60e11b81526004016108c293929190612a59565b8b8d63ffffffff167f361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff28d8560405161107f929190918252602082015260400190565b60405180910390a350505050505050505050505050565b600091825260cb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600082826040516020016110d6929190612a8d565b60405160208183030381529060405280519060200120905092915050565b61111e7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504133611096565b61113d5760405163ea79172d60e01b81523360048201526024016108c2565b60fd546040516001600160a01b038084169216907ff0cca8e172b90b70922c6757d918f7a532326dfd3e9f3c5b117a616d2bb0721290600090a360fd80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806002866040516111ac91906128b7565b602060405180830381855afa1580156111c9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906111ec91906128d3565b8551602087012060fd5491925090339060009061121b90600160a01b900463ffffffff168b8686868c8c611b74565b60fd805463ffffffff600160a01b918290048116600090815260fe602052604090819020859055925492519394508d9391909204909116907f22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e939061128a908d908d9088908e908e903490612ab1565b60405180910390a360fd8054600160a01b900463ffffffff169060146112af83612b2b565b825463ffffffff9182166101009390930a92830291909202199091161790555060fd546001600160a01b0316156113425760fd546040516333bb7f9160e01b81526001600160a01b038481166004830152909116906333bb7f919034906024016000604051808303818588803b15801561132857600080fd5b505af115801561133c573d6000803e3d6000fd5b50505050505b9998505050505050505050565b60008061135c33846110c1565b6000818152600160205260409020549092506001600160a01b031633146113b85760008281526001602052604090819020549051633368f56b60e11b81523360048201526001600160a01b0390911660248201526044016108c2565b6113c28483611ada565b6000838152602081815260409182902080546001600160a01b0319166001600160a01b038516908117909155915191825291925083917ffc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736910160405180910390a29250929050565b600060028660405161143c91906128b7565b602060405180830381855afa158015611459573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061147c91906128d3565b9050600060028660405161149091906128b7565b602060405180830381855afa1580156114ad573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114d091906128d3565b90506114de88838388611bf4565b60ff8890556101008290556101016114f68782612b9c565b506000846001600160a01b03168460405161151191906128b7565b6000604051808303816000865af19150503d806000811461154e576040519150601f19603f3d011682016040523d82523d6000602084013e611553565b606091505b5050905080611579578484604051636c544f3360e01b81526004016108c2929190612a8d565b60ff6000905561010060009055610101600061159591906121b0565b60408051848152602081018490528a917f41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15910160405180910390a2505050505050505050565b60006115e733836110c1565b6000818152600160205260409020549091506001600160a01b031633146116435760008181526001602052604090819020549051633368f56b60e11b81523360048201526001600160a01b0390911660248201526044016108c2565b6001600160a01b03831661166a576040516302d48d1f60e61b815260040160405180910390fd5b6000818152602081815260409182902080546001600160a01b0319166001600160a01b038716908117909155915191825282917ffc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736910160405180910390a292915050565b600254610100900460ff16158080156116ee5750600254600160ff909116105b806117085750303b158015611708575060025460ff166001145b61176b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108c2565b6002805460ff19166001179055801561178e576002805461ff0019166101001790555b60fd80546001600160a01b0319166001600160a01b038616179055610102805460ff191690556117be8383611c9f565b8015611804576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600082815260cb60205260409020600101546118258161182f565b6108f083836118bf565b610a4f8133611d35565b6118438282611096565b61096f57600082815260cb602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561187b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118c98282611096565b1561096f57600082815260cb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6119507ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0533611096565b610a4f57604051636744392960e11b81523360048201526024016108c2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119a2576108f083611d8e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156119fc575060408051601f3d908101601f191682019092526119f9918101906128d3565b60015b611a5f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108c2565b600080516020612de28339815191528114611ace5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108c2565b506108f0838383611e2a565b60008251600003611afe576040516321744a5960e01b815260040160405180910390fd5b818351602085016000f590506001600160a01b038116611b3157604051632081741d60e11b815260040160405180910390fd5b825160208401206040516001600160a01b0383169184917f27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f53290600090a492915050565b6040516001600160e01b031960e089811b821660208401526024830189905260448301889052606483018790526bffffffffffffffffffffffff19606087901b166084840152818516609884015283901b16609c82015260009060a001604051602081830303815290604052805190602001209050979650505050505050565b600084815260208190526040908190205490516303784b1960e61b81526001600160a01b0390911690819063de12c64090611c3790879087908790600401612c5c565b6020604051808303816000875af1158015611c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7a9190612c7b565b610bfc57808484846040516316c7141360e31b81526004016108c29493929190612c9d565b600254610100900460ff16611cc65760405162461bcd60e51b81526004016108c290612cca565b611cce611e4f565b611cd6611e4f565b611ce1600083611839565b611d0b7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0583611839565b61096f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504182611839565b611d3f8282611096565b61096f57611d4c81611e78565b611d57836020611e8a565b604051602001611d68929190612d15565b60408051601f198184030181529082905262461bcd60e51b82526108c2916004016122b5565b6001600160a01b0381163b611dfb5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108c2565b600080516020612de283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e338361202d565b600082511180611e405750805b156108f057611804838361206d565b600254610100900460ff16611e765760405162461bcd60e51b81526004016108c290612cca565b565b606061070e6001600160a01b03831660145b60606000611e99836002612d8a565b611ea4906002612da1565b67ffffffffffffffff811115611ebc57611ebc6122c8565b6040519080825280601f01601f191660200182016040528015611ee6576020820181803683370190505b509050600360fc1b81600081518110611f0157611f01612db4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f3057611f30612db4565b60200101906001600160f81b031916908160001a9053506000611f54846002612d8a565b611f5f906001612da1565b90505b6001811115611fd7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f9357611f93612db4565b1a60f81b828281518110611fa957611fa9612db4565b60200101906001600160f81b031916908160001a90535060049490941c93611fd081612dca565b9050611f62565b5083156120265760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108c2565b9392505050565b61203681611d8e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606120268383604051806060016040528060278152602001612e02602791396060600080856001600160a01b0316856040516120aa91906128b7565b600060405180830381855af49150503d80600081146120e5576040519150601f19603f3d011682016040523d82523d6000602084013e6120ea565b606091505b50915091506120fb86838387612105565b9695505050505050565b6060831561217457825160000361216d576001600160a01b0385163b61216d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c2565b508161217e565b61217e8383612186565b949350505050565b8151156121965781518083602001fd5b8060405162461bcd60e51b81526004016108c291906122b5565b5080546121bc9061287d565b6000825580601f106121cc575050565b601f016020900490600052602060002090810190610a4f91905b808211156121fa57600081556001016121e6565b5090565b80356001600160e01b03198116811461221657600080fd5b919050565b60006020828403121561222d57600080fd5b612026826121fe565b803563ffffffff8116811461221657600080fd5b60006020828403121561225c57600080fd5b61202682612236565b60005b83811015612280578181015183820152602001612268565b50506000910152565b600081518084526122a1816020860160208601612265565b601f01601f19169290920160200192915050565b6020815260006120266020830184612289565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122ef57600080fd5b813567ffffffffffffffff8082111561230a5761230a6122c8565b604051601f8301601f19908116603f01168101908282118183101715612332576123326122c8565b8160405283815286602085880101111561234b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561237e57600080fd5b82359150602083013567ffffffffffffffff81111561239c57600080fd5b6123a8858286016122de565b9150509250929050565b6000602082840312156123c457600080fd5b5035919050565b80356001600160a01b038116811461221657600080fd5b600080604083850312156123f557600080fd5b82359150612405602084016123cb565b90509250929050565b60006020828403121561242057600080fd5b612026826123cb565b60008060006060848603121561243e57600080fd5b612447846123cb565b9250612455602085016123cb565b9150604084013567ffffffffffffffff81111561247157600080fd5b61247d868287016122de565b9150509250925092565b600080600080600060a0868803121561249f57600080fd5b85359450602086013567ffffffffffffffff808211156124be57600080fd5b6124ca89838a016122de565b95506124d8604089016123cb565b945060608801359150808211156124ee57600080fd5b506124fb888289016122de565b92505061250a60808701612236565b90509295509295909350565b6000806040838503121561252957600080fd5b612532836123cb565b9150602083013567ffffffffffffffff81111561239c57600080fd5b60008060006060848603121561256357600080fd5b61256c846123cb565b9250602084013567ffffffffffffffff8082111561258957600080fd5b612595878388016122de565b935060408601359150808211156125ab57600080fd5b5061247d868287016122de565b60008060008060008060008060006101208a8c0312156125d757600080fd5b6125e08a612236565b985060208a0135975060408a013596506125fc60608b016123cb565b955061260a60808b016121fe565b945061261860a08b01612236565b935060c08a013567ffffffffffffffff8082111561263557600080fd5b6126418d838e016122de565b945060e08c013591508082111561265757600080fd5b6126638d838e016122de565b93506101008c013591508082111561267a57600080fd5b506126878c828d016122de565b9150509295985092959850929598565b600080600080600060a086880312156126af57600080fd5b85359450602086013567ffffffffffffffff808211156126ce57600080fd5b6126da89838a016122de565b955060408801359150808211156126f057600080fd5b506126fd888289016122de565b93505061270c606087016121fe565b915061250a60808701612236565b6000806040838503121561272d57600080fd5b823567ffffffffffffffff8082111561274557600080fd5b612751868387016122de565b9350602085013591508082111561276757600080fd5b506123a8858286016122de565b60008060008060008060c0878903121561278d57600080fd5b86359550602087013567ffffffffffffffff808211156127ac57600080fd5b6127b88a838b016122de565b965060408901359150808211156127ce57600080fd5b6127da8a838b016122de565b955060608901359150808211156127f057600080fd5b6127fc8a838b016122de565b945061280a60808a016123cb565b935060a089013591508082111561282057600080fd5b5061282d89828a016122de565b9150509295509295509295565b60008060006060848603121561284f57600080fd5b612858846123cb565b9250612866602085016123cb565b9150612874604085016123cb565b90509250925092565b600181811c9082168061289157607f821691505b6020821081036128b157634e487b7160e01b600052602260045260246000fd5b50919050565b600082516128c9818460208701612265565b9190910192915050565b6000602082840312156128e557600080fd5b5051919050565b82815260406020820152600061217e6040830184612289565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060018060a01b038086168352606060208401526129bf6060840186612289565b9150808416604084015250949350505050565b60c0815260006129e560c0830189612289565b6001600160a01b0388811660208501528382036040850152612a078289612289565b63ffffffff9790971660608501529490941660808301525060a00152509392505050565b604081526000612a3e6040830185612289565b8281036020840152612a508185612289565b95945050505050565b63ffffffff60e01b84168152606060208201526000612a7b6060830185612289565b82810360408401526120fb8185612289565b6001600160a01b038316815260406020820181905260009061217e90830184612289565b60c081526000612ac460c0830189612289565b8281036020840152612ad68189612289565b6001600160a01b0397909716604084015250506001600160e01b031993909316606084015263ffffffff91909116608083015260a09091015292915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103612b4457612b44612b15565b6001019392505050565b601f8211156108f057600081815260208120601f850160051c81016020861015612b755750805b601f850160051c820191505b81811015612b9457828155600101612b81565b505050505050565b815167ffffffffffffffff811115612bb657612bb66122c8565b612bca81612bc4845461287d565b84612b4e565b602080601f831160018114612bff5760008415612be75750858301515b600019600386901b1c1916600185901b178555612b94565b600085815260208120601f198616915b82811015612c2e57888601518255948401946001909101908401612c0f565b5085821015612c4c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152826020820152606060408201526000612a506060830184612289565b600060208284031215612c8d57600080fd5b8151801515811461202657600080fd5b60018060a01b03851681528360208201528260408201526080606082015260006120fb6080830184612289565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d4d816017850160208801612265565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d7e816028840160208801612265565b01602801949350505050565b808202811582820484141761070e5761070e612b15565b8082018082111561070e5761070e612b15565b634e487b7160e01b600052603260045260246000fd5b600081612dd957612dd9612b15565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a42477a1d4ac7de52bc199afc2ebb581ba03c71adcabf8555be70f0ff462027a64736f6c63430008140033",
}

// SuccinctGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use SuccinctGatewayMetaData.ABI instead.
var SuccinctGatewayABI = SuccinctGatewayMetaData.ABI

// SuccinctGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SuccinctGatewayMetaData.Bin instead.
var SuccinctGatewayBin = SuccinctGatewayMetaData.Bin

// DeploySuccinctGateway deploys a new Ethereum contract, binding an instance of SuccinctGateway to it.
func DeploySuccinctGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SuccinctGateway, error) {
	parsed, err := SuccinctGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SuccinctGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SuccinctGateway{SuccinctGatewayCaller: SuccinctGatewayCaller{contract: contract}, SuccinctGatewayTransactor: SuccinctGatewayTransactor{contract: contract}, SuccinctGatewayFilterer: SuccinctGatewayFilterer{contract: contract}}, nil
}

// SuccinctGateway is an auto generated Go binding around an Ethereum contract.
type SuccinctGateway struct {
	SuccinctGatewayCaller     // Read-only binding to the contract
	SuccinctGatewayTransactor // Write-only binding to the contract
	SuccinctGatewayFilterer   // Log filterer for contract events
}

// SuccinctGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type SuccinctGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SuccinctGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SuccinctGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SuccinctGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SuccinctGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SuccinctGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SuccinctGatewaySession struct {
	Contract     *SuccinctGateway  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SuccinctGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SuccinctGatewayCallerSession struct {
	Contract *SuccinctGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SuccinctGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SuccinctGatewayTransactorSession struct {
	Contract     *SuccinctGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SuccinctGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type SuccinctGatewayRaw struct {
	Contract *SuccinctGateway // Generic contract binding to access the raw methods on
}

// SuccinctGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SuccinctGatewayCallerRaw struct {
	Contract *SuccinctGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// SuccinctGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SuccinctGatewayTransactorRaw struct {
	Contract *SuccinctGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSuccinctGateway creates a new instance of SuccinctGateway, bound to a specific deployed contract.
func NewSuccinctGateway(address common.Address, backend bind.ContractBackend) (*SuccinctGateway, error) {
	contract, err := bindSuccinctGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SuccinctGateway{SuccinctGatewayCaller: SuccinctGatewayCaller{contract: contract}, SuccinctGatewayTransactor: SuccinctGatewayTransactor{contract: contract}, SuccinctGatewayFilterer: SuccinctGatewayFilterer{contract: contract}}, nil
}

// NewSuccinctGatewayCaller creates a new read-only instance of SuccinctGateway, bound to a specific deployed contract.
func NewSuccinctGatewayCaller(address common.Address, caller bind.ContractCaller) (*SuccinctGatewayCaller, error) {
	contract, err := bindSuccinctGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayCaller{contract: contract}, nil
}

// NewSuccinctGatewayTransactor creates a new write-only instance of SuccinctGateway, bound to a specific deployed contract.
func NewSuccinctGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*SuccinctGatewayTransactor, error) {
	contract, err := bindSuccinctGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayTransactor{contract: contract}, nil
}

// NewSuccinctGatewayFilterer creates a new log filterer instance of SuccinctGateway, bound to a specific deployed contract.
func NewSuccinctGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*SuccinctGatewayFilterer, error) {
	contract, err := bindSuccinctGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayFilterer{contract: contract}, nil
}

// bindSuccinctGateway binds a generic wrapper to an already deployed contract.
func bindSuccinctGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SuccinctGatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SuccinctGateway *SuccinctGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SuccinctGateway.Contract.SuccinctGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SuccinctGateway *SuccinctGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.SuccinctGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SuccinctGateway *SuccinctGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.SuccinctGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SuccinctGateway *SuccinctGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SuccinctGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SuccinctGateway *SuccinctGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SuccinctGateway *SuccinctGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _SuccinctGateway.Contract.DEFAULTADMINROLE(&_SuccinctGateway.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _SuccinctGateway.Contract.DEFAULTADMINROLE(&_SuccinctGateway.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) GUARDIANROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "GUARDIAN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) GUARDIANROLE() ([32]byte, error) {
	return _SuccinctGateway.Contract.GUARDIANROLE(&_SuccinctGateway.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) GUARDIANROLE() ([32]byte, error) {
	return _SuccinctGateway.Contract.GUARDIANROLE(&_SuccinctGateway.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) TIMELOCKROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "TIMELOCK_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) TIMELOCKROLE() ([32]byte, error) {
	return _SuccinctGateway.Contract.TIMELOCKROLE(&_SuccinctGateway.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) TIMELOCKROLE() ([32]byte, error) {
	return _SuccinctGateway.Contract.TIMELOCKROLE(&_SuccinctGateway.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_SuccinctGateway *SuccinctGatewayCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_SuccinctGateway *SuccinctGatewaySession) VERSION() (string, error) {
	return _SuccinctGateway.Contract.VERSION(&_SuccinctGateway.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_SuccinctGateway *SuccinctGatewayCallerSession) VERSION() (string, error) {
	return _SuccinctGateway.Contract.VERSION(&_SuccinctGateway.CallOpts)
}

// FeeVault is a free data retrieval call binding the contract method 0x478222c2.
//
// Solidity: function feeVault() view returns(address)
func (_SuccinctGateway *SuccinctGatewayCaller) FeeVault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "feeVault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeVault is a free data retrieval call binding the contract method 0x478222c2.
//
// Solidity: function feeVault() view returns(address)
func (_SuccinctGateway *SuccinctGatewaySession) FeeVault() (common.Address, error) {
	return _SuccinctGateway.Contract.FeeVault(&_SuccinctGateway.CallOpts)
}

// FeeVault is a free data retrieval call binding the contract method 0x478222c2.
//
// Solidity: function feeVault() view returns(address)
func (_SuccinctGateway *SuccinctGatewayCallerSession) FeeVault() (common.Address, error) {
	return _SuccinctGateway.Contract.FeeVault(&_SuccinctGateway.CallOpts)
}

// GetFunctionId is a free data retrieval call binding the contract method 0x9538f56f.
//
// Solidity: function getFunctionId(address _owner, string _name) pure returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewayCaller) GetFunctionId(opts *bind.CallOpts, _owner common.Address, _name string) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "getFunctionId", _owner, _name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetFunctionId is a free data retrieval call binding the contract method 0x9538f56f.
//
// Solidity: function getFunctionId(address _owner, string _name) pure returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewaySession) GetFunctionId(_owner common.Address, _name string) ([32]byte, error) {
	return _SuccinctGateway.Contract.GetFunctionId(&_SuccinctGateway.CallOpts, _owner, _name)
}

// GetFunctionId is a free data retrieval call binding the contract method 0x9538f56f.
//
// Solidity: function getFunctionId(address _owner, string _name) pure returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewayCallerSession) GetFunctionId(_owner common.Address, _name string) ([32]byte, error) {
	return _SuccinctGateway.Contract.GetFunctionId(&_SuccinctGateway.CallOpts, _owner, _name)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _SuccinctGateway.Contract.GetRoleAdmin(&_SuccinctGateway.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _SuccinctGateway.Contract.GetRoleAdmin(&_SuccinctGateway.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_SuccinctGateway *SuccinctGatewayCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_SuccinctGateway *SuccinctGatewaySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _SuccinctGateway.Contract.HasRole(&_SuccinctGateway.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_SuccinctGateway *SuccinctGatewayCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _SuccinctGateway.Contract.HasRole(&_SuccinctGateway.CallOpts, role, account)
}

// IsCallback is a free data retrieval call binding the contract method 0x05d7c1cf.
//
// Solidity: function isCallback() view returns(bool)
func (_SuccinctGateway *SuccinctGatewayCaller) IsCallback(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "isCallback")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCallback is a free data retrieval call binding the contract method 0x05d7c1cf.
//
// Solidity: function isCallback() view returns(bool)
func (_SuccinctGateway *SuccinctGatewaySession) IsCallback() (bool, error) {
	return _SuccinctGateway.Contract.IsCallback(&_SuccinctGateway.CallOpts)
}

// IsCallback is a free data retrieval call binding the contract method 0x05d7c1cf.
//
// Solidity: function isCallback() view returns(bool)
func (_SuccinctGateway *SuccinctGatewayCallerSession) IsCallback() (bool, error) {
	return _SuccinctGateway.Contract.IsCallback(&_SuccinctGateway.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_SuccinctGateway *SuccinctGatewayCaller) Nonce(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_SuccinctGateway *SuccinctGatewaySession) Nonce() (uint32, error) {
	return _SuccinctGateway.Contract.Nonce(&_SuccinctGateway.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) Nonce() (uint32, error) {
	return _SuccinctGateway.Contract.Nonce(&_SuccinctGateway.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) ProxiableUUID() ([32]byte, error) {
	return _SuccinctGateway.Contract.ProxiableUUID(&_SuccinctGateway.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) ProxiableUUID() ([32]byte, error) {
	return _SuccinctGateway.Contract.ProxiableUUID(&_SuccinctGateway.CallOpts)
}

// Requests is a free data retrieval call binding the contract method 0x0ab469b0.
//
// Solidity: function requests(uint32 ) view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) Requests(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "requests", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Requests is a free data retrieval call binding the contract method 0x0ab469b0.
//
// Solidity: function requests(uint32 ) view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) Requests(arg0 uint32) ([32]byte, error) {
	return _SuccinctGateway.Contract.Requests(&_SuccinctGateway.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x0ab469b0.
//
// Solidity: function requests(uint32 ) view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) Requests(arg0 uint32) ([32]byte, error) {
	return _SuccinctGateway.Contract.Requests(&_SuccinctGateway.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SuccinctGateway *SuccinctGatewayCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SuccinctGateway *SuccinctGatewaySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SuccinctGateway.Contract.SupportsInterface(&_SuccinctGateway.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SuccinctGateway *SuccinctGatewayCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SuccinctGateway.Contract.SupportsInterface(&_SuccinctGateway.CallOpts, interfaceId)
}

// VerifiedCall is a free data retrieval call binding the contract method 0x176e62fd.
//
// Solidity: function verifiedCall(bytes32 _functionId, bytes _input) view returns(bytes)
func (_SuccinctGateway *SuccinctGatewayCaller) VerifiedCall(opts *bind.CallOpts, _functionId [32]byte, _input []byte) ([]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "verifiedCall", _functionId, _input)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// VerifiedCall is a free data retrieval call binding the contract method 0x176e62fd.
//
// Solidity: function verifiedCall(bytes32 _functionId, bytes _input) view returns(bytes)
func (_SuccinctGateway *SuccinctGatewaySession) VerifiedCall(_functionId [32]byte, _input []byte) ([]byte, error) {
	return _SuccinctGateway.Contract.VerifiedCall(&_SuccinctGateway.CallOpts, _functionId, _input)
}

// VerifiedCall is a free data retrieval call binding the contract method 0x176e62fd.
//
// Solidity: function verifiedCall(bytes32 _functionId, bytes _input) view returns(bytes)
func (_SuccinctGateway *SuccinctGatewayCallerSession) VerifiedCall(_functionId [32]byte, _input []byte) ([]byte, error) {
	return _SuccinctGateway.Contract.VerifiedCall(&_SuccinctGateway.CallOpts, _functionId, _input)
}

// VerifiedFunctionId is a free data retrieval call binding the contract method 0x8157ce2b.
//
// Solidity: function verifiedFunctionId() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) VerifiedFunctionId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "verifiedFunctionId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VerifiedFunctionId is a free data retrieval call binding the contract method 0x8157ce2b.
//
// Solidity: function verifiedFunctionId() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) VerifiedFunctionId() ([32]byte, error) {
	return _SuccinctGateway.Contract.VerifiedFunctionId(&_SuccinctGateway.CallOpts)
}

// VerifiedFunctionId is a free data retrieval call binding the contract method 0x8157ce2b.
//
// Solidity: function verifiedFunctionId() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) VerifiedFunctionId() ([32]byte, error) {
	return _SuccinctGateway.Contract.VerifiedFunctionId(&_SuccinctGateway.CallOpts)
}

// VerifiedInputHash is a free data retrieval call binding the contract method 0x80e0bbb0.
//
// Solidity: function verifiedInputHash() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCaller) VerifiedInputHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "verifiedInputHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VerifiedInputHash is a free data retrieval call binding the contract method 0x80e0bbb0.
//
// Solidity: function verifiedInputHash() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) VerifiedInputHash() ([32]byte, error) {
	return _SuccinctGateway.Contract.VerifiedInputHash(&_SuccinctGateway.CallOpts)
}

// VerifiedInputHash is a free data retrieval call binding the contract method 0x80e0bbb0.
//
// Solidity: function verifiedInputHash() view returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayCallerSession) VerifiedInputHash() ([32]byte, error) {
	return _SuccinctGateway.Contract.VerifiedInputHash(&_SuccinctGateway.CallOpts)
}

// VerifiedOutput is a free data retrieval call binding the contract method 0x173869f0.
//
// Solidity: function verifiedOutput() view returns(bytes)
func (_SuccinctGateway *SuccinctGatewayCaller) VerifiedOutput(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "verifiedOutput")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// VerifiedOutput is a free data retrieval call binding the contract method 0x173869f0.
//
// Solidity: function verifiedOutput() view returns(bytes)
func (_SuccinctGateway *SuccinctGatewaySession) VerifiedOutput() ([]byte, error) {
	return _SuccinctGateway.Contract.VerifiedOutput(&_SuccinctGateway.CallOpts)
}

// VerifiedOutput is a free data retrieval call binding the contract method 0x173869f0.
//
// Solidity: function verifiedOutput() view returns(bytes)
func (_SuccinctGateway *SuccinctGatewayCallerSession) VerifiedOutput() ([]byte, error) {
	return _SuccinctGateway.Contract.VerifiedOutput(&_SuccinctGateway.CallOpts)
}

// VerifierOwners is a free data retrieval call binding the contract method 0x8bcfc3a0.
//
// Solidity: function verifierOwners(bytes32 ) view returns(address)
func (_SuccinctGateway *SuccinctGatewayCaller) VerifierOwners(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "verifierOwners", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierOwners is a free data retrieval call binding the contract method 0x8bcfc3a0.
//
// Solidity: function verifierOwners(bytes32 ) view returns(address)
func (_SuccinctGateway *SuccinctGatewaySession) VerifierOwners(arg0 [32]byte) (common.Address, error) {
	return _SuccinctGateway.Contract.VerifierOwners(&_SuccinctGateway.CallOpts, arg0)
}

// VerifierOwners is a free data retrieval call binding the contract method 0x8bcfc3a0.
//
// Solidity: function verifierOwners(bytes32 ) view returns(address)
func (_SuccinctGateway *SuccinctGatewayCallerSession) VerifierOwners(arg0 [32]byte) (common.Address, error) {
	return _SuccinctGateway.Contract.VerifierOwners(&_SuccinctGateway.CallOpts, arg0)
}

// Verifiers is a free data retrieval call binding the contract method 0xefe1c950.
//
// Solidity: function verifiers(bytes32 ) view returns(address)
func (_SuccinctGateway *SuccinctGatewayCaller) Verifiers(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _SuccinctGateway.contract.Call(opts, &out, "verifiers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifiers is a free data retrieval call binding the contract method 0xefe1c950.
//
// Solidity: function verifiers(bytes32 ) view returns(address)
func (_SuccinctGateway *SuccinctGatewaySession) Verifiers(arg0 [32]byte) (common.Address, error) {
	return _SuccinctGateway.Contract.Verifiers(&_SuccinctGateway.CallOpts, arg0)
}

// Verifiers is a free data retrieval call binding the contract method 0xefe1c950.
//
// Solidity: function verifiers(bytes32 ) view returns(address)
func (_SuccinctGateway *SuccinctGatewayCallerSession) Verifiers(arg0 [32]byte) (common.Address, error) {
	return _SuccinctGateway.Contract.Verifiers(&_SuccinctGateway.CallOpts, arg0)
}

// DeployAndRegisterFunction is a paid mutator transaction binding the contract method 0x61f846c9.
//
// Solidity: function deployAndRegisterFunction(address _owner, bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayTransactor) DeployAndRegisterFunction(opts *bind.TransactOpts, _owner common.Address, _bytecode []byte, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "deployAndRegisterFunction", _owner, _bytecode, _name)
}

// DeployAndRegisterFunction is a paid mutator transaction binding the contract method 0x61f846c9.
//
// Solidity: function deployAndRegisterFunction(address _owner, bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewaySession) DeployAndRegisterFunction(_owner common.Address, _bytecode []byte, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.DeployAndRegisterFunction(&_SuccinctGateway.TransactOpts, _owner, _bytecode, _name)
}

// DeployAndRegisterFunction is a paid mutator transaction binding the contract method 0x61f846c9.
//
// Solidity: function deployAndRegisterFunction(address _owner, bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayTransactorSession) DeployAndRegisterFunction(_owner common.Address, _bytecode []byte, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.DeployAndRegisterFunction(&_SuccinctGateway.TransactOpts, _owner, _bytecode, _name)
}

// DeployAndUpdateFunction is a paid mutator transaction binding the contract method 0xb63755e5.
//
// Solidity: function deployAndUpdateFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayTransactor) DeployAndUpdateFunction(opts *bind.TransactOpts, _bytecode []byte, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "deployAndUpdateFunction", _bytecode, _name)
}

// DeployAndUpdateFunction is a paid mutator transaction binding the contract method 0xb63755e5.
//
// Solidity: function deployAndUpdateFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewaySession) DeployAndUpdateFunction(_bytecode []byte, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.DeployAndUpdateFunction(&_SuccinctGateway.TransactOpts, _bytecode, _name)
}

// DeployAndUpdateFunction is a paid mutator transaction binding the contract method 0xb63755e5.
//
// Solidity: function deployAndUpdateFunction(bytes _bytecode, string _name) returns(bytes32 functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayTransactorSession) DeployAndUpdateFunction(_bytecode []byte, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.DeployAndUpdateFunction(&_SuccinctGateway.TransactOpts, _bytecode, _name)
}

// FulfillCall is a paid mutator transaction binding the contract method 0xbac2a106.
//
// Solidity: function fulfillCall(bytes32 _functionId, bytes _input, bytes _output, bytes _proof, address _callbackAddress, bytes _callbackData) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) FulfillCall(opts *bind.TransactOpts, _functionId [32]byte, _input []byte, _output []byte, _proof []byte, _callbackAddress common.Address, _callbackData []byte) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "fulfillCall", _functionId, _input, _output, _proof, _callbackAddress, _callbackData)
}

// FulfillCall is a paid mutator transaction binding the contract method 0xbac2a106.
//
// Solidity: function fulfillCall(bytes32 _functionId, bytes _input, bytes _output, bytes _proof, address _callbackAddress, bytes _callbackData) returns()
func (_SuccinctGateway *SuccinctGatewaySession) FulfillCall(_functionId [32]byte, _input []byte, _output []byte, _proof []byte, _callbackAddress common.Address, _callbackData []byte) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.FulfillCall(&_SuccinctGateway.TransactOpts, _functionId, _input, _output, _proof, _callbackAddress, _callbackData)
}

// FulfillCall is a paid mutator transaction binding the contract method 0xbac2a106.
//
// Solidity: function fulfillCall(bytes32 _functionId, bytes _input, bytes _output, bytes _proof, address _callbackAddress, bytes _callbackData) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) FulfillCall(_functionId [32]byte, _input []byte, _output []byte, _proof []byte, _callbackAddress common.Address, _callbackData []byte) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.FulfillCall(&_SuccinctGateway.TransactOpts, _functionId, _input, _output, _proof, _callbackAddress, _callbackData)
}

// FulfillCallback is a paid mutator transaction binding the contract method 0x78370ebd.
//
// Solidity: function fulfillCallback(uint32 _nonce, bytes32 _functionId, bytes32 _inputHash, address _callbackAddress, bytes4 _callbackSelector, uint32 _callbackGasLimit, bytes _context, bytes _output, bytes _proof) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) FulfillCallback(opts *bind.TransactOpts, _nonce uint32, _functionId [32]byte, _inputHash [32]byte, _callbackAddress common.Address, _callbackSelector [4]byte, _callbackGasLimit uint32, _context []byte, _output []byte, _proof []byte) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "fulfillCallback", _nonce, _functionId, _inputHash, _callbackAddress, _callbackSelector, _callbackGasLimit, _context, _output, _proof)
}

// FulfillCallback is a paid mutator transaction binding the contract method 0x78370ebd.
//
// Solidity: function fulfillCallback(uint32 _nonce, bytes32 _functionId, bytes32 _inputHash, address _callbackAddress, bytes4 _callbackSelector, uint32 _callbackGasLimit, bytes _context, bytes _output, bytes _proof) returns()
func (_SuccinctGateway *SuccinctGatewaySession) FulfillCallback(_nonce uint32, _functionId [32]byte, _inputHash [32]byte, _callbackAddress common.Address, _callbackSelector [4]byte, _callbackGasLimit uint32, _context []byte, _output []byte, _proof []byte) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.FulfillCallback(&_SuccinctGateway.TransactOpts, _nonce, _functionId, _inputHash, _callbackAddress, _callbackSelector, _callbackGasLimit, _context, _output, _proof)
}

// FulfillCallback is a paid mutator transaction binding the contract method 0x78370ebd.
//
// Solidity: function fulfillCallback(uint32 _nonce, bytes32 _functionId, bytes32 _inputHash, address _callbackAddress, bytes4 _callbackSelector, uint32 _callbackGasLimit, bytes _context, bytes _output, bytes _proof) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) FulfillCallback(_nonce uint32, _functionId [32]byte, _inputHash [32]byte, _callbackAddress common.Address, _callbackSelector [4]byte, _callbackGasLimit uint32, _context []byte, _output []byte, _proof []byte) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.FulfillCallback(&_SuccinctGateway.TransactOpts, _nonce, _functionId, _inputHash, _callbackAddress, _callbackSelector, _callbackGasLimit, _context, _output, _proof)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewaySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.GrantRole(&_SuccinctGateway.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.GrantRole(&_SuccinctGateway.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _feeVault, address _timelock, address _guardian) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) Initialize(opts *bind.TransactOpts, _feeVault common.Address, _timelock common.Address, _guardian common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "initialize", _feeVault, _timelock, _guardian)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _feeVault, address _timelock, address _guardian) returns()
func (_SuccinctGateway *SuccinctGatewaySession) Initialize(_feeVault common.Address, _timelock common.Address, _guardian common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.Initialize(&_SuccinctGateway.TransactOpts, _feeVault, _timelock, _guardian)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _feeVault, address _timelock, address _guardian) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) Initialize(_feeVault common.Address, _timelock common.Address, _guardian common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.Initialize(&_SuccinctGateway.TransactOpts, _feeVault, _timelock, _guardian)
}

// RegisterFunction is a paid mutator transaction binding the contract method 0x40651ac1.
//
// Solidity: function registerFunction(address _owner, address _verifier, string _name) returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewayTransactor) RegisterFunction(opts *bind.TransactOpts, _owner common.Address, _verifier common.Address, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "registerFunction", _owner, _verifier, _name)
}

// RegisterFunction is a paid mutator transaction binding the contract method 0x40651ac1.
//
// Solidity: function registerFunction(address _owner, address _verifier, string _name) returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewaySession) RegisterFunction(_owner common.Address, _verifier common.Address, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RegisterFunction(&_SuccinctGateway.TransactOpts, _owner, _verifier, _name)
}

// RegisterFunction is a paid mutator transaction binding the contract method 0x40651ac1.
//
// Solidity: function registerFunction(address _owner, address _verifier, string _name) returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewayTransactorSession) RegisterFunction(_owner common.Address, _verifier common.Address, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RegisterFunction(&_SuccinctGateway.TransactOpts, _owner, _verifier, _name)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewaySession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RenounceRole(&_SuccinctGateway.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RenounceRole(&_SuccinctGateway.TransactOpts, role, account)
}

// RequestCall is a paid mutator transaction binding the contract method 0x436a61d5.
//
// Solidity: function requestCall(bytes32 _functionId, bytes _input, address _entryAddress, bytes _entryCalldata, uint32 _entryGasLimit) payable returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) RequestCall(opts *bind.TransactOpts, _functionId [32]byte, _input []byte, _entryAddress common.Address, _entryCalldata []byte, _entryGasLimit uint32) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "requestCall", _functionId, _input, _entryAddress, _entryCalldata, _entryGasLimit)
}

// RequestCall is a paid mutator transaction binding the contract method 0x436a61d5.
//
// Solidity: function requestCall(bytes32 _functionId, bytes _input, address _entryAddress, bytes _entryCalldata, uint32 _entryGasLimit) payable returns()
func (_SuccinctGateway *SuccinctGatewaySession) RequestCall(_functionId [32]byte, _input []byte, _entryAddress common.Address, _entryCalldata []byte, _entryGasLimit uint32) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RequestCall(&_SuccinctGateway.TransactOpts, _functionId, _input, _entryAddress, _entryCalldata, _entryGasLimit)
}

// RequestCall is a paid mutator transaction binding the contract method 0x436a61d5.
//
// Solidity: function requestCall(bytes32 _functionId, bytes _input, address _entryAddress, bytes _entryCalldata, uint32 _entryGasLimit) payable returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) RequestCall(_functionId [32]byte, _input []byte, _entryAddress common.Address, _entryCalldata []byte, _entryGasLimit uint32) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RequestCall(&_SuccinctGateway.TransactOpts, _functionId, _input, _entryAddress, _entryCalldata, _entryGasLimit)
}

// RequestCallback is a paid mutator transaction binding the contract method 0xb3f04fdf.
//
// Solidity: function requestCallback(bytes32 _functionId, bytes _input, bytes _context, bytes4 _callbackSelector, uint32 _callbackGasLimit) payable returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayTransactor) RequestCallback(opts *bind.TransactOpts, _functionId [32]byte, _input []byte, _context []byte, _callbackSelector [4]byte, _callbackGasLimit uint32) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "requestCallback", _functionId, _input, _context, _callbackSelector, _callbackGasLimit)
}

// RequestCallback is a paid mutator transaction binding the contract method 0xb3f04fdf.
//
// Solidity: function requestCallback(bytes32 _functionId, bytes _input, bytes _context, bytes4 _callbackSelector, uint32 _callbackGasLimit) payable returns(bytes32)
func (_SuccinctGateway *SuccinctGatewaySession) RequestCallback(_functionId [32]byte, _input []byte, _context []byte, _callbackSelector [4]byte, _callbackGasLimit uint32) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RequestCallback(&_SuccinctGateway.TransactOpts, _functionId, _input, _context, _callbackSelector, _callbackGasLimit)
}

// RequestCallback is a paid mutator transaction binding the contract method 0xb3f04fdf.
//
// Solidity: function requestCallback(bytes32 _functionId, bytes _input, bytes _context, bytes4 _callbackSelector, uint32 _callbackGasLimit) payable returns(bytes32)
func (_SuccinctGateway *SuccinctGatewayTransactorSession) RequestCallback(_functionId [32]byte, _input []byte, _context []byte, _callbackSelector [4]byte, _callbackGasLimit uint32) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RequestCallback(&_SuccinctGateway.TransactOpts, _functionId, _input, _context, _callbackSelector, _callbackGasLimit)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewaySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RevokeRole(&_SuccinctGateway.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.RevokeRole(&_SuccinctGateway.TransactOpts, role, account)
}

// SetFeeVault is a paid mutator transaction binding the contract method 0xa591f97f.
//
// Solidity: function setFeeVault(address _feeVault) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) SetFeeVault(opts *bind.TransactOpts, _feeVault common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "setFeeVault", _feeVault)
}

// SetFeeVault is a paid mutator transaction binding the contract method 0xa591f97f.
//
// Solidity: function setFeeVault(address _feeVault) returns()
func (_SuccinctGateway *SuccinctGatewaySession) SetFeeVault(_feeVault common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.SetFeeVault(&_SuccinctGateway.TransactOpts, _feeVault)
}

// SetFeeVault is a paid mutator transaction binding the contract method 0xa591f97f.
//
// Solidity: function setFeeVault(address _feeVault) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) SetFeeVault(_feeVault common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.SetFeeVault(&_SuccinctGateway.TransactOpts, _feeVault)
}

// UpdateFunction is a paid mutator transaction binding the contract method 0xbd58c4bb.
//
// Solidity: function updateFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewayTransactor) UpdateFunction(opts *bind.TransactOpts, _verifier common.Address, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "updateFunction", _verifier, _name)
}

// UpdateFunction is a paid mutator transaction binding the contract method 0xbd58c4bb.
//
// Solidity: function updateFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewaySession) UpdateFunction(_verifier common.Address, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.UpdateFunction(&_SuccinctGateway.TransactOpts, _verifier, _name)
}

// UpdateFunction is a paid mutator transaction binding the contract method 0xbd58c4bb.
//
// Solidity: function updateFunction(address _verifier, string _name) returns(bytes32 functionId)
func (_SuccinctGateway *SuccinctGatewayTransactorSession) UpdateFunction(_verifier common.Address, _name string) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.UpdateFunction(&_SuccinctGateway.TransactOpts, _verifier, _name)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_SuccinctGateway *SuccinctGatewaySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.UpgradeTo(&_SuccinctGateway.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.UpgradeTo(&_SuccinctGateway.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SuccinctGateway *SuccinctGatewayTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SuccinctGateway.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SuccinctGateway *SuccinctGatewaySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.UpgradeToAndCall(&_SuccinctGateway.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SuccinctGateway *SuccinctGatewayTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SuccinctGateway.Contract.UpgradeToAndCall(&_SuccinctGateway.TransactOpts, newImplementation, data)
}

// SuccinctGatewayAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the SuccinctGateway contract.
type SuccinctGatewayAdminChangedIterator struct {
	Event *SuccinctGatewayAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayAdminChanged represents a AdminChanged event raised by the SuccinctGateway contract.
type SuccinctGatewayAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*SuccinctGatewayAdminChangedIterator, error) {

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayAdminChangedIterator{contract: _SuccinctGateway.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayAdminChanged) (event.Subscription, error) {

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayAdminChanged)
				if err := _SuccinctGateway.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseAdminChanged(log types.Log) (*SuccinctGatewayAdminChanged, error) {
	event := new(SuccinctGatewayAdminChanged)
	if err := _SuccinctGateway.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the SuccinctGateway contract.
type SuccinctGatewayBeaconUpgradedIterator struct {
	Event *SuccinctGatewayBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayBeaconUpgraded represents a BeaconUpgraded event raised by the SuccinctGateway contract.
type SuccinctGatewayBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*SuccinctGatewayBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayBeaconUpgradedIterator{contract: _SuccinctGateway.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayBeaconUpgraded)
				if err := _SuccinctGateway.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseBeaconUpgraded(log types.Log) (*SuccinctGatewayBeaconUpgraded, error) {
	event := new(SuccinctGatewayBeaconUpgraded)
	if err := _SuccinctGateway.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayCallIterator is returned from FilterCall and is used to iterate over the raw logs and unpacked data for Call events raised by the SuccinctGateway contract.
type SuccinctGatewayCallIterator struct {
	Event *SuccinctGatewayCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayCall represents a Call event raised by the SuccinctGateway contract.
type SuccinctGatewayCall struct {
	FunctionId [32]byte
	InputHash  [32]byte
	OutputHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCall is a free log retrieval operation binding the contract event 0x41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15.
//
// Solidity: event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterCall(opts *bind.FilterOpts, functionId [][32]byte) (*SuccinctGatewayCallIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "Call", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayCallIterator{contract: _SuccinctGateway.contract, event: "Call", logs: logs, sub: sub}, nil
}

// WatchCall is a free log subscription operation binding the contract event 0x41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15.
//
// Solidity: event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchCall(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayCall, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "Call", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayCall)
				if err := _SuccinctGateway.contract.UnpackLog(event, "Call", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCall is a log parse operation binding the contract event 0x41d7122d18af9f0c92f23bcea9d5fa416cadcd1ed2fc8e544a3c89b841ecfd15.
//
// Solidity: event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseCall(log types.Log) (*SuccinctGatewayCall, error) {
	event := new(SuccinctGatewayCall)
	if err := _SuccinctGateway.contract.UnpackLog(event, "Call", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayDeployedIterator is returned from FilterDeployed and is used to iterate over the raw logs and unpacked data for Deployed events raised by the SuccinctGateway contract.
type SuccinctGatewayDeployedIterator struct {
	Event *SuccinctGatewayDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayDeployed represents a Deployed event raised by the SuccinctGateway contract.
type SuccinctGatewayDeployed struct {
	BytecodeHash    [32]byte
	Salt            [32]byte
	DeployedAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployed is a free log retrieval operation binding the contract event 0x27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f532.
//
// Solidity: event Deployed(bytes32 indexed bytecodeHash, bytes32 indexed salt, address indexed deployedAddress)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterDeployed(opts *bind.FilterOpts, bytecodeHash [][32]byte, salt [][32]byte, deployedAddress []common.Address) (*SuccinctGatewayDeployedIterator, error) {

	var bytecodeHashRule []interface{}
	for _, bytecodeHashItem := range bytecodeHash {
		bytecodeHashRule = append(bytecodeHashRule, bytecodeHashItem)
	}
	var saltRule []interface{}
	for _, saltItem := range salt {
		saltRule = append(saltRule, saltItem)
	}
	var deployedAddressRule []interface{}
	for _, deployedAddressItem := range deployedAddress {
		deployedAddressRule = append(deployedAddressRule, deployedAddressItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "Deployed", bytecodeHashRule, saltRule, deployedAddressRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayDeployedIterator{contract: _SuccinctGateway.contract, event: "Deployed", logs: logs, sub: sub}, nil
}

// WatchDeployed is a free log subscription operation binding the contract event 0x27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f532.
//
// Solidity: event Deployed(bytes32 indexed bytecodeHash, bytes32 indexed salt, address indexed deployedAddress)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchDeployed(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayDeployed, bytecodeHash [][32]byte, salt [][32]byte, deployedAddress []common.Address) (event.Subscription, error) {

	var bytecodeHashRule []interface{}
	for _, bytecodeHashItem := range bytecodeHash {
		bytecodeHashRule = append(bytecodeHashRule, bytecodeHashItem)
	}
	var saltRule []interface{}
	for _, saltItem := range salt {
		saltRule = append(saltRule, saltItem)
	}
	var deployedAddressRule []interface{}
	for _, deployedAddressItem := range deployedAddress {
		deployedAddressRule = append(deployedAddressRule, deployedAddressItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "Deployed", bytecodeHashRule, saltRule, deployedAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayDeployed)
				if err := _SuccinctGateway.contract.UnpackLog(event, "Deployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployed is a log parse operation binding the contract event 0x27b8e3132afa95254770e1c1d214eafde52bc47d1b6e1f5dfcbb380c3ca3f532.
//
// Solidity: event Deployed(bytes32 indexed bytecodeHash, bytes32 indexed salt, address indexed deployedAddress)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseDeployed(log types.Log) (*SuccinctGatewayDeployed, error) {
	event := new(SuccinctGatewayDeployed)
	if err := _SuccinctGateway.contract.UnpackLog(event, "Deployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayFunctionRegisteredIterator is returned from FilterFunctionRegistered and is used to iterate over the raw logs and unpacked data for FunctionRegistered events raised by the SuccinctGateway contract.
type SuccinctGatewayFunctionRegisteredIterator struct {
	Event *SuccinctGatewayFunctionRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayFunctionRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayFunctionRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayFunctionRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayFunctionRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayFunctionRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayFunctionRegistered represents a FunctionRegistered event raised by the SuccinctGateway contract.
type SuccinctGatewayFunctionRegistered struct {
	FunctionId [32]byte
	Verifier   common.Address
	Name       string
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionRegistered is a free log retrieval operation binding the contract event 0x52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea.
//
// Solidity: event FunctionRegistered(bytes32 indexed functionId, address verifier, string name, address owner)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterFunctionRegistered(opts *bind.FilterOpts, functionId [][32]byte) (*SuccinctGatewayFunctionRegisteredIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "FunctionRegistered", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayFunctionRegisteredIterator{contract: _SuccinctGateway.contract, event: "FunctionRegistered", logs: logs, sub: sub}, nil
}

// WatchFunctionRegistered is a free log subscription operation binding the contract event 0x52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea.
//
// Solidity: event FunctionRegistered(bytes32 indexed functionId, address verifier, string name, address owner)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchFunctionRegistered(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayFunctionRegistered, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "FunctionRegistered", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayFunctionRegistered)
				if err := _SuccinctGateway.contract.UnpackLog(event, "FunctionRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionRegistered is a log parse operation binding the contract event 0x52664851d3d2a6452a5b4ce529443a2e880f03048598d72fbc426d7402956dea.
//
// Solidity: event FunctionRegistered(bytes32 indexed functionId, address verifier, string name, address owner)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseFunctionRegistered(log types.Log) (*SuccinctGatewayFunctionRegistered, error) {
	event := new(SuccinctGatewayFunctionRegistered)
	if err := _SuccinctGateway.contract.UnpackLog(event, "FunctionRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayFunctionVerifierUpdatedIterator is returned from FilterFunctionVerifierUpdated and is used to iterate over the raw logs and unpacked data for FunctionVerifierUpdated events raised by the SuccinctGateway contract.
type SuccinctGatewayFunctionVerifierUpdatedIterator struct {
	Event *SuccinctGatewayFunctionVerifierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayFunctionVerifierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayFunctionVerifierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayFunctionVerifierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayFunctionVerifierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayFunctionVerifierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayFunctionVerifierUpdated represents a FunctionVerifierUpdated event raised by the SuccinctGateway contract.
type SuccinctGatewayFunctionVerifierUpdated struct {
	FunctionId [32]byte
	Verifier   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionVerifierUpdated is a free log retrieval operation binding the contract event 0xfc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736.
//
// Solidity: event FunctionVerifierUpdated(bytes32 indexed functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterFunctionVerifierUpdated(opts *bind.FilterOpts, functionId [][32]byte) (*SuccinctGatewayFunctionVerifierUpdatedIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "FunctionVerifierUpdated", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayFunctionVerifierUpdatedIterator{contract: _SuccinctGateway.contract, event: "FunctionVerifierUpdated", logs: logs, sub: sub}, nil
}

// WatchFunctionVerifierUpdated is a free log subscription operation binding the contract event 0xfc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736.
//
// Solidity: event FunctionVerifierUpdated(bytes32 indexed functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchFunctionVerifierUpdated(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayFunctionVerifierUpdated, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "FunctionVerifierUpdated", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayFunctionVerifierUpdated)
				if err := _SuccinctGateway.contract.UnpackLog(event, "FunctionVerifierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionVerifierUpdated is a log parse operation binding the contract event 0xfc14566d4fed0acece30e4fd5b3f5f6dadee9c5ecb852fdaf9c13999c733b736.
//
// Solidity: event FunctionVerifierUpdated(bytes32 indexed functionId, address verifier)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseFunctionVerifierUpdated(log types.Log) (*SuccinctGatewayFunctionVerifierUpdated, error) {
	event := new(SuccinctGatewayFunctionVerifierUpdated)
	if err := _SuccinctGateway.contract.UnpackLog(event, "FunctionVerifierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SuccinctGateway contract.
type SuccinctGatewayInitializedIterator struct {
	Event *SuccinctGatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayInitialized represents a Initialized event raised by the SuccinctGateway contract.
type SuccinctGatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*SuccinctGatewayInitializedIterator, error) {

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayInitializedIterator{contract: _SuccinctGateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayInitialized)
				if err := _SuccinctGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseInitialized(log types.Log) (*SuccinctGatewayInitialized, error) {
	event := new(SuccinctGatewayInitialized)
	if err := _SuccinctGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayRequestCallIterator is returned from FilterRequestCall and is used to iterate over the raw logs and unpacked data for RequestCall events raised by the SuccinctGateway contract.
type SuccinctGatewayRequestCallIterator struct {
	Event *SuccinctGatewayRequestCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayRequestCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayRequestCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayRequestCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayRequestCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayRequestCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayRequestCall represents a RequestCall event raised by the SuccinctGateway contract.
type SuccinctGatewayRequestCall struct {
	FunctionId    [32]byte
	Input         []byte
	EntryAddress  common.Address
	EntryCalldata []byte
	EntryGasLimit uint32
	Sender        common.Address
	FeeAmount     *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRequestCall is a free log retrieval operation binding the contract event 0x88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3.
//
// Solidity: event RequestCall(bytes32 indexed functionId, bytes input, address entryAddress, bytes entryCalldata, uint32 entryGasLimit, address sender, uint256 feeAmount)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterRequestCall(opts *bind.FilterOpts, functionId [][32]byte) (*SuccinctGatewayRequestCallIterator, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "RequestCall", functionIdRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayRequestCallIterator{contract: _SuccinctGateway.contract, event: "RequestCall", logs: logs, sub: sub}, nil
}

// WatchRequestCall is a free log subscription operation binding the contract event 0x88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3.
//
// Solidity: event RequestCall(bytes32 indexed functionId, bytes input, address entryAddress, bytes entryCalldata, uint32 entryGasLimit, address sender, uint256 feeAmount)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchRequestCall(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayRequestCall, functionId [][32]byte) (event.Subscription, error) {

	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "RequestCall", functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayRequestCall)
				if err := _SuccinctGateway.contract.UnpackLog(event, "RequestCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCall is a log parse operation binding the contract event 0x88632d59d3df3bee2ce2a06fbb05e1c8542c44cb2e7339bb1812500a978644d3.
//
// Solidity: event RequestCall(bytes32 indexed functionId, bytes input, address entryAddress, bytes entryCalldata, uint32 entryGasLimit, address sender, uint256 feeAmount)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseRequestCall(log types.Log) (*SuccinctGatewayRequestCall, error) {
	event := new(SuccinctGatewayRequestCall)
	if err := _SuccinctGateway.contract.UnpackLog(event, "RequestCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayRequestCallbackIterator is returned from FilterRequestCallback and is used to iterate over the raw logs and unpacked data for RequestCallback events raised by the SuccinctGateway contract.
type SuccinctGatewayRequestCallbackIterator struct {
	Event *SuccinctGatewayRequestCallback // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayRequestCallbackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayRequestCallback)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayRequestCallback)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayRequestCallbackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayRequestCallbackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayRequestCallback represents a RequestCallback event raised by the SuccinctGateway contract.
type SuccinctGatewayRequestCallback struct {
	Nonce            uint32
	FunctionId       [32]byte
	Input            []byte
	Context          []byte
	CallbackAddress  common.Address
	CallbackSelector [4]byte
	CallbackGasLimit uint32
	FeeAmount        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterRequestCallback is a free log retrieval operation binding the contract event 0x22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93.
//
// Solidity: event RequestCallback(uint32 indexed nonce, bytes32 indexed functionId, bytes input, bytes context, address callbackAddress, bytes4 callbackSelector, uint32 callbackGasLimit, uint256 feeAmount)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterRequestCallback(opts *bind.FilterOpts, nonce []uint32, functionId [][32]byte) (*SuccinctGatewayRequestCallbackIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "RequestCallback", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayRequestCallbackIterator{contract: _SuccinctGateway.contract, event: "RequestCallback", logs: logs, sub: sub}, nil
}

// WatchRequestCallback is a free log subscription operation binding the contract event 0x22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93.
//
// Solidity: event RequestCallback(uint32 indexed nonce, bytes32 indexed functionId, bytes input, bytes context, address callbackAddress, bytes4 callbackSelector, uint32 callbackGasLimit, uint256 feeAmount)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchRequestCallback(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayRequestCallback, nonce []uint32, functionId [][32]byte) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "RequestCallback", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayRequestCallback)
				if err := _SuccinctGateway.contract.UnpackLog(event, "RequestCallback", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCallback is a log parse operation binding the contract event 0x22a09d598b323a3c65d69787dd6fd143dd8e4d2f91733c247113167df31e3e93.
//
// Solidity: event RequestCallback(uint32 indexed nonce, bytes32 indexed functionId, bytes input, bytes context, address callbackAddress, bytes4 callbackSelector, uint32 callbackGasLimit, uint256 feeAmount)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseRequestCallback(log types.Log) (*SuccinctGatewayRequestCallback, error) {
	event := new(SuccinctGatewayRequestCallback)
	if err := _SuccinctGateway.contract.UnpackLog(event, "RequestCallback", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayRequestFulfilledIterator is returned from FilterRequestFulfilled and is used to iterate over the raw logs and unpacked data for RequestFulfilled events raised by the SuccinctGateway contract.
type SuccinctGatewayRequestFulfilledIterator struct {
	Event *SuccinctGatewayRequestFulfilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayRequestFulfilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayRequestFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayRequestFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayRequestFulfilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayRequestFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayRequestFulfilled represents a RequestFulfilled event raised by the SuccinctGateway contract.
type SuccinctGatewayRequestFulfilled struct {
	Nonce      uint32
	FunctionId [32]byte
	InputHash  [32]byte
	OutputHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRequestFulfilled is a free log retrieval operation binding the contract event 0x361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff2.
//
// Solidity: event RequestFulfilled(uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterRequestFulfilled(opts *bind.FilterOpts, nonce []uint32, functionId [][32]byte) (*SuccinctGatewayRequestFulfilledIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "RequestFulfilled", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayRequestFulfilledIterator{contract: _SuccinctGateway.contract, event: "RequestFulfilled", logs: logs, sub: sub}, nil
}

// WatchRequestFulfilled is a free log subscription operation binding the contract event 0x361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff2.
//
// Solidity: event RequestFulfilled(uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchRequestFulfilled(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayRequestFulfilled, nonce []uint32, functionId [][32]byte) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var functionIdRule []interface{}
	for _, functionIdItem := range functionId {
		functionIdRule = append(functionIdRule, functionIdItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "RequestFulfilled", nonceRule, functionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayRequestFulfilled)
				if err := _SuccinctGateway.contract.UnpackLog(event, "RequestFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestFulfilled is a log parse operation binding the contract event 0x361a2fc76bc9f35b079dd353fd7fdd8aaf61f1a7979cf59653225692c19bbff2.
//
// Solidity: event RequestFulfilled(uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseRequestFulfilled(log types.Log) (*SuccinctGatewayRequestFulfilled, error) {
	event := new(SuccinctGatewayRequestFulfilled)
	if err := _SuccinctGateway.contract.UnpackLog(event, "RequestFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the SuccinctGateway contract.
type SuccinctGatewayRoleAdminChangedIterator struct {
	Event *SuccinctGatewayRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayRoleAdminChanged represents a RoleAdminChanged event raised by the SuccinctGateway contract.
type SuccinctGatewayRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*SuccinctGatewayRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayRoleAdminChangedIterator{contract: _SuccinctGateway.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayRoleAdminChanged)
				if err := _SuccinctGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseRoleAdminChanged(log types.Log) (*SuccinctGatewayRoleAdminChanged, error) {
	event := new(SuccinctGatewayRoleAdminChanged)
	if err := _SuccinctGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the SuccinctGateway contract.
type SuccinctGatewayRoleGrantedIterator struct {
	Event *SuccinctGatewayRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayRoleGranted represents a RoleGranted event raised by the SuccinctGateway contract.
type SuccinctGatewayRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*SuccinctGatewayRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayRoleGrantedIterator{contract: _SuccinctGateway.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayRoleGranted)
				if err := _SuccinctGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseRoleGranted(log types.Log) (*SuccinctGatewayRoleGranted, error) {
	event := new(SuccinctGatewayRoleGranted)
	if err := _SuccinctGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the SuccinctGateway contract.
type SuccinctGatewayRoleRevokedIterator struct {
	Event *SuccinctGatewayRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayRoleRevoked represents a RoleRevoked event raised by the SuccinctGateway contract.
type SuccinctGatewayRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*SuccinctGatewayRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayRoleRevokedIterator{contract: _SuccinctGateway.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayRoleRevoked)
				if err := _SuccinctGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseRoleRevoked(log types.Log) (*SuccinctGatewayRoleRevoked, error) {
	event := new(SuccinctGatewayRoleRevoked)
	if err := _SuccinctGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewaySetFeeVaultIterator is returned from FilterSetFeeVault and is used to iterate over the raw logs and unpacked data for SetFeeVault events raised by the SuccinctGateway contract.
type SuccinctGatewaySetFeeVaultIterator struct {
	Event *SuccinctGatewaySetFeeVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewaySetFeeVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewaySetFeeVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewaySetFeeVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewaySetFeeVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewaySetFeeVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewaySetFeeVault represents a SetFeeVault event raised by the SuccinctGateway contract.
type SuccinctGatewaySetFeeVault struct {
	OldFeeVault common.Address
	NewFeeVault common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFeeVault is a free log retrieval operation binding the contract event 0xf0cca8e172b90b70922c6757d918f7a532326dfd3e9f3c5b117a616d2bb07212.
//
// Solidity: event SetFeeVault(address indexed oldFeeVault, address indexed newFeeVault)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterSetFeeVault(opts *bind.FilterOpts, oldFeeVault []common.Address, newFeeVault []common.Address) (*SuccinctGatewaySetFeeVaultIterator, error) {

	var oldFeeVaultRule []interface{}
	for _, oldFeeVaultItem := range oldFeeVault {
		oldFeeVaultRule = append(oldFeeVaultRule, oldFeeVaultItem)
	}
	var newFeeVaultRule []interface{}
	for _, newFeeVaultItem := range newFeeVault {
		newFeeVaultRule = append(newFeeVaultRule, newFeeVaultItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "SetFeeVault", oldFeeVaultRule, newFeeVaultRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewaySetFeeVaultIterator{contract: _SuccinctGateway.contract, event: "SetFeeVault", logs: logs, sub: sub}, nil
}

// WatchSetFeeVault is a free log subscription operation binding the contract event 0xf0cca8e172b90b70922c6757d918f7a532326dfd3e9f3c5b117a616d2bb07212.
//
// Solidity: event SetFeeVault(address indexed oldFeeVault, address indexed newFeeVault)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchSetFeeVault(opts *bind.WatchOpts, sink chan<- *SuccinctGatewaySetFeeVault, oldFeeVault []common.Address, newFeeVault []common.Address) (event.Subscription, error) {

	var oldFeeVaultRule []interface{}
	for _, oldFeeVaultItem := range oldFeeVault {
		oldFeeVaultRule = append(oldFeeVaultRule, oldFeeVaultItem)
	}
	var newFeeVaultRule []interface{}
	for _, newFeeVaultItem := range newFeeVault {
		newFeeVaultRule = append(newFeeVaultRule, newFeeVaultItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "SetFeeVault", oldFeeVaultRule, newFeeVaultRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewaySetFeeVault)
				if err := _SuccinctGateway.contract.UnpackLog(event, "SetFeeVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFeeVault is a log parse operation binding the contract event 0xf0cca8e172b90b70922c6757d918f7a532326dfd3e9f3c5b117a616d2bb07212.
//
// Solidity: event SetFeeVault(address indexed oldFeeVault, address indexed newFeeVault)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseSetFeeVault(log types.Log) (*SuccinctGatewaySetFeeVault, error) {
	event := new(SuccinctGatewaySetFeeVault)
	if err := _SuccinctGateway.contract.UnpackLog(event, "SetFeeVault", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SuccinctGatewayUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the SuccinctGateway contract.
type SuccinctGatewayUpgradedIterator struct {
	Event *SuccinctGatewayUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SuccinctGatewayUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SuccinctGatewayUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SuccinctGatewayUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SuccinctGatewayUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SuccinctGatewayUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SuccinctGatewayUpgraded represents a Upgraded event raised by the SuccinctGateway contract.
type SuccinctGatewayUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SuccinctGateway *SuccinctGatewayFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*SuccinctGatewayUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _SuccinctGateway.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &SuccinctGatewayUpgradedIterator{contract: _SuccinctGateway.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SuccinctGateway *SuccinctGatewayFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *SuccinctGatewayUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _SuccinctGateway.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SuccinctGatewayUpgraded)
				if err := _SuccinctGateway.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SuccinctGateway *SuccinctGatewayFilterer) ParseUpgraded(log types.Log) (*SuccinctGatewayUpgraded, error) {
	event := new(SuccinctGatewayUpgraded)
	if err := _SuccinctGateway.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
