import { BitArray } from "@chainsafe/ssz";
import { altair } from "@lodestar/types";
import { phase0 } from "@lodestar/types";
export declare function toLittleEndian(x: number): Uint8Array;
export declare function toLittleEndianFromBigInt(x: bigint): Uint8Array;
export declare function toBigIntBEFromBytes32(x: Uint8Array): bigint;
export declare function toBigIntFromBytes32(x: Uint8Array): bigint;
export declare function get253BitMask(): bigint;
export declare function computeBitSum(bits: BitArray): bigint;
export declare function truncateHexPrefix(str: string): string;
export declare function hexToBytes(hex: string): Uint8Array;
export declare function hexToBigIntArray(hex: string): bigint[];
export declare function hexToBits(hex: string): number[];
export declare function restoreMerkleRoot(leaf: Uint8Array, index: bigint, branch: Uint8Array[]): Uint8Array;
export declare function isValidMerkleBranch(leaf: Uint8Array, index: bigint, branch: Uint8Array[], root: Uint8Array): boolean;
export declare function hashBeaconBlockHeader(header: phase0.BeaconBlockHeader): Uint8Array;
export declare function hashSyncCommittee(syncCommittee: altair.SyncCommittee): Uint8Array;
export declare function hashPair(x: Uint8Array, y: Uint8Array): Uint8Array;
export declare function computeDomain(forkVersion: Uint8Array, genesisValidatorsRoot: Uint8Array): Uint8Array;
//# sourceMappingURL=ssz.d.ts.map